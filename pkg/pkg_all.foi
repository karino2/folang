package_info frt =
  let Println: string->()
  let Sprintf1<T>: string->T->string
  let Sprintf2<T, U>: string->T->U->string
  let Printf1<T>: string->T->()
  let Fst<T, U> : T*U->T
  let Snd<T, U> : T*U->U
  let Assert : bool->string->()
  let Panic : string->()
  let Panicf1<T>: string->T->()
  let Panicf2<T, U>: string->T->U->()
  let Empty<T>: ()->T


package_info buf =
  type Buffer
  let New: ()->Buffer
  let Write: Buffer->string->()
  let String: Buffer->string

// Similar to F# List module: [List (FSharp.Core)](https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-listmodule.html)
package_info slice =
  let New<T>: ()->[]T
  let Length<T>: []T -> int
  // alias
  let Len<T>: []T -> int
  let Item<T>: int -> []T -> T
  let IsEmpty<T>: []T -> bool
  let Last<T>: []T -> T
  let Head<T>: []T -> T
  let Tail<T>: []T -> []T
  let PopLast<T>: []T -> []T
  let PushLast<T>: T->[]T->[]T
  let PushHead<T>: T->[]T->[]T
  let Collect<T, U>: (T->[]U)->[]T->[]U
  let Concat<T>: [][]T->[]T
  let Append<T>: []T->[]T->[]T
  let Take<T> : int->[]T->[]T
  let Map<T, U> : (T->U)->[]T->[]U
  let Mapi<T, U> : (int->T->U)->[]T->[]U
  let Iter<T> : (T->())->[]T->()
  let Filter<T> : (T->bool)->[]T->[]T
  let Sort<T>: []T -> []T
  let SortBy<T, U>: (T->U)->[]T->[]T
  let Skip<T>: int->[]T->[]T
  let Zip<T, U>: []T->[]U->[]T*U
  let Forall<T>: (T->bool)->[]T->bool
  let Forany<T>: (T->bool)->[]T->bool
  // T must be comparable
  let Distinct<T>: []T->[]T
  let TryFind<T>: (T->bool)->[]T->T*bool
  let Fold<T, S>: (S->T->S)->S->[]T->S

// Somewhat similar to F# String module: [String (FSharp.Core)](https://fsharp.github.io/fsharp-core-docs/reference/fsharp-core-stringmodule.html)
package_info strings =
  let Concat: string->[]string->string
  let Length: string->int
  let AppendTail: string->string->string
  let AppendHead: string->string->string
  let HasSuffix: string->string->bool
  let TrimSuffix: string->string->string
  let EncloseWith: string->string->string->string
  let Split: string->string->[]string
  let SplitN: int->string->string->[]string
  let IsEmpty: string->bool
  let IsNotEmpty: string->bool

package_info sys =
  let Args: ()->[]string
  let ReadFile: string->string*bool
  let WriteFile: string->string->bool

// Similar to F# Map module: [Map (FSharp.Core)](https://fsharp.github.io/fsharp-core-docs/reference/fsharp-collections-mapmodule.html)
package_info dict =
  type Dict<K, V>
  let New<K, V>: ()->Dict<K, V>
  let Add<K, V>: Dict<K,V>->K->V->()
  let ContainsKey<K, V>: Dict<K, V>->K->bool
  let TryFind<K, V>: Dict<K, V>->K->V*bool
  let Item<K, V>: Dict<K, V>->K->V
  let KVs<K, V>: Dict<K, V>->[]K*V
  let Keys<K, V>: Dict<K, V>->[]K
  let Values<K, V>: Dict<K, V>->[]V
  let ToDict<K, V>: []K*V->Dict<K, V>
