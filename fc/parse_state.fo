package main

import frt
import slice
import dict


/*
  Scope and Parser related
*/

/*
  Scope related
*/
type ScopeDict = {
  VarFacMap: dict.Dict<string, []FType->(()->TypeVar)->VarRef>;
  RecFacMap: dict.Dict<string, RecordFactory>;
  TypeFacMap: dict.Dict<string, []FType->FType>;
}

let NewScopeDict () =
  let fvm = dict.New<string, []FType->(()->TypeVar)->VarRef> ()
  let rfm = dict.New<string, RecordFactory> ()
  let tfm = dict.New<string, []FType->FType> ()
  {VarFacMap=fvm; RecFacMap=rfm; TypeFacMap=tfm}

package_info _ =
  type Scope
  let NewScopeImpl0: ScopeDict->Scope
  let NewScopeImpl: ScopeDict->Scope->Scope
  let SCHasParent: Scope->bool
  let SCParent: Scope->Scope
  let SCSDict: Scope->ScopeDict

let NewScope0 () =
  let sd = NewScopeDict ()
  NewScopeImpl0 sd

let NewScope parent =
  let sd = NewScopeDict ()
  NewScopeImpl sd parent

let vToVarFac v tlist tvgen =
  VRVar v

let scDefVar s name v =
  let sdic = SCSDict s
  dict.Add sdic.VarFacMap name (vToVarFac v)

let scRegisterVarFac s name fac =
  let sdic = SCSDict s
  dict.Add sdic.VarFacMap name fac

let emptyVarFac (tlist:[]FType) (tgen: ()->TypeVar) =
  PanicNow "should never called"
  frt.Empty<VarRef> ()

let scLookupVarFac s name : ([]FType->(()->TypeVar)->VarRef)*bool =
  let sd = SCSDict s
  let (vfac, ok) = dict.TryFind sd.VarFacMap name
  if ok then
    (vfac, ok)
  elif SCHasParent s then
    scLookupVarFac (SCParent s) name
  else
    (emptyVarFac, false)

let scRegisterTypeFac s name fac =
  let sdic = SCSDict s
  dict.Add sdic.TypeFacMap name fac

let ftToTypeFac ft (tlist:[]FType) =
  ft

let scRegisterType s name ftype =
  scRegisterTypeFac s name (ftToTypeFac ftype)

let scRegisterRecFac s name fac =
  let sdic = SCSDict s
  dict.Add sdic.RecFacMap name fac
  dict.Add sdic.TypeFacMap name (GenRecordFType fac)

let scLookupRecFacCur s fieldNames =
  let sdic = SCSDict s
  dict.Values sdic.RecFacMap
  |> slice.TryFind (recFacMatch fieldNames)

let emptyRecFac () =
  frt.Empty<RecordFactory> ()


let scLookupRecFac s fieldNames : RecordFactory*bool =
  let (rfac, ok) = scLookupRecFacCur s fieldNames
  if ok then
    (rfac, ok)  
  elif SCHasParent s then
    scLookupRecFac (SCParent s) fieldNames
  else
    (emptyRecFac (), false)

let scLookupRecFacByName s name : RecordFactory*bool =
  let sd = SCSDict s
  let (rfac, ok) = dict.TryFind sd.RecFacMap name
  if ok then
    (rfac, ok)
  elif SCHasParent s then
    scLookupRecFacByName (SCParent s) name
  else
    (emptyRecFac (), false)

let scLookupTypeFac s name =
  let sd = SCSDict s
  let (rec, ok) = dict.TryFind sd.TypeFacMap name
  if ok then
    (rec, ok)
  elif SCHasParent s then
    scLookupTypeFac (SCParent s) name
  else
    let empty = ftToTypeFac FUnit
    (empty, false)


// wrapper types.
package_info _ =
  type TypeVarAllocator
  let NewTypeVarAllocator: string->TypeVarAllocator
  let tvaToTypeVarGen: TypeVarAllocator->(()->TypeVar)
  let tvaReset: TypeVarAllocator->()
  let resetUniqueTmpCounter: ()->()

type EquivSet = {Dict: dict.Dict<string, bool>}

type TypeDefCtx = {
  tva: TypeVarAllocator;
  insideTD: bool;
  defined: dict.Dict<string, FType>;
  // key: tvname, value: fwrdDeclTypename
  allocedDict: dict.Dict<string, string>;
}

/*
  resType is most concrete type for this equiv set.
  If only TypeVar is known, alphabetically first one is set.
*/
type EquivInfo = {eset: EquivSet; resType: FType}

type Resolver = {eid: dict.Dict<string, EquivInfo>}

let newResolver () =
  let neid = dict.New<string, EquivInfo> ()
  {eid=neid}

type TypeVarCtx = {
  tva: TypeVarAllocator;
  resolver: Resolver;
}

let newTypeVarCtx () =
  let tva = NewTypeVarAllocator "_T"
  let res = newResolver ()
  {tva=tva; resolver=res}

let tvcToTypeVarGen (tvc:TypeVarCtx) =
  tvaToTypeVarGen tvc.tva

type ParseState = {
  tkz: Tokenizer;
  scope: Scope;
  offsideCol: []int;
  tvc: TypeVarCtx;
  tdctx: TypeDefCtx;
}

package_info _ =
  let ParseList<T>: (ParseState->ParseState*T)->(ParseState->bool)->ParseState->ParseState*[]T
  let ParseList2<T>: (ParseState->ParseState*T)->(ParseState->bool)->(ParseState->ParseState)->ParseState->ParseState*[]T

let MapL fn tup =
  let nl = frt.Fst tup |> fn
  (nl, frt.Snd tup)

let MapR fn tup =
  let nr = frt.Snd tup |> fn
  (frt.Fst tup, nr)

/*
  New Pair.

  Using like.
  XXX |> PairL lval
  XXX |> PairR rval

  The results are
    (lval, XXX)
    (XXX, rval)
  respectively.
*/

let PairL l r =
  (l, r)

let PairR r l =
  (l, r)

let newParse (tkz:Tokenizer) (scope:Scope) (offCols:[]int) (tvc:TypeVarCtx) (tdctx:TypeDefCtx) =
  {tkz=tkz; scope=scope; offsideCol=offCols; tvc=tvc; tdctx=tdctx}

let psWithTkz (org:ParseState) (tkz:Tokenizer) =
  newParse tkz org.scope org.offsideCol org.tvc org.tdctx

let psWithScope (org:ParseState) (nsc:Scope) =
  newParse org.tkz nsc org.offsideCol org.tvc org.tdctx

let psWithOffside (org:ParseState) (offs:[]int) =
  newParse org.tkz org.scope offs org.tvc org.tdctx

let psWithTDCtx (org:ParseState) (ntdctx:TypeDefCtx) =
  newParse org.tkz org.scope org.offsideCol org.tvc ntdctx

let psWithTVCtx (org:ParseState) (ntvctx:TypeVarCtx) =
  newParse org.tkz org.scope org.offsideCol ntvctx org.tdctx


let initParse (src: string) =
  let tkz = newTkz src
  let scope = NewScope0 ()
  let offside = [0]
  let tva2 = NewTypeVarAllocator "_P"
  let defdict = dict.New<string, FType> ()
  let adict = dict.New<string, string> ()
  let tvctx = newTypeVarCtx ()
  let tdctx = {tva=tva2; insideTD=false; defined=defdict; allocedDict= adict}
  newParse tkz scope offside tvctx tdctx

let psPanic (ps:ParseState) msg =
  tkzPanic ps.tkz msg

let psForErrMsg (ps:ParseState) =
  SetLastTkz ps.tkz

let psSetNewSrc (src: string) (ps:ParseState) =
  let tkz = newTkz src
  psWithTkz ps tkz

let psTypeVarGen (ps:ParseState) =
  tvcToTypeVarGen ps.tvc

let psPushScope (org:ParseState) =
  NewScope org.scope |> psWithScope org

let popScope (sc:Scope) =
  SCParent sc

let psPopScope (org:ParseState) =
  popScope org.scope |> psWithScope org

let psCurOffside (ps:ParseState) =
  slice.Last ps.offsideCol

let psCurCol (ps:ParseState) =
  ps.tkz.col

let psPushOffside (ps:ParseState) =
  let curCol = psCurCol ps
  if (psCurOffside ps) >= curCol then
    psPanic ps "Overrun offside rule"
  slice.PushLast curCol ps.offsideCol
  |> psWithOffside ps

let psPopOffside (ps:ParseState) =
  slice.PopLast ps.offsideCol
  |> psWithOffside ps

// reset defined dict and tva here.
let psEnterTypeDef (ps:ParseState) =
  let old = ps.tdctx
  let ntd = dict.New<string, FType> ()
  let nald = dict.New<string, string> ()
  let ntdctx = {tva=old.tva; insideTD=true; defined=ntd; allocedDict=nald}
  tvaReset ntdctx.tva
  psWithTDCtx ps ntdctx

// stay defined dict and tva for further use.
let psLeaveTypeDef (ps:ParseState) =
  let old = ps.tdctx
  let ntdctx = {tva=old.tva; insideTD=false; defined=old.defined; allocedDict=old.allocedDict}
  psWithTDCtx ps ntdctx

let psInsideTypeDef (ps:ParseState) =
  ps.tdctx.insideTD

let tdctxTVFAlloc (tdctx:TypeDefCtx) (name:string) =
  let gen = tvaToTypeVarGen tdctx.tva
  let tvar = gen ()
  dict.Add tdctx.allocedDict tvar.Name name
  tvar |> FTypeVar


let psCurrent (ps:ParseState) =
  ps.tkz.current

let psCurrentTT (ps:ParseState) =
  let tk = psCurrent ps
  tk.ttype

let psCurIs (expectTT: TokenType) (ps:ParseState) =
  (psCurrentTT ps) = expectTT

let psCurIsNot (expectTT: TokenType) (ps:ParseState) =
  (psCurrentTT ps) <> expectTT


let psNext (ps:ParseState) =
  let ntk = tkzNext ps.tkz
  psWithTkz ps ntk

let psNextNOL (ps:ParseState) =
  let ntk = tkzNextNOL ps.tkz
  psWithTkz ps ntk

let psSkipEOL (ps:ParseState) =
  if (psCurrentTT ps) = EOL then
    psNextNOL ps
  else
    ps

let psExpectMsg (ttype:TokenType) (ps:ParseState) msg =
  if not (psCurIs ttype ps) then
    psPanic ps msg
  ()

let psUnexpect (ttype:TokenType) (ps:ParseState) msg =
  if psCurIs ttype ps then
    psPanic ps msg
  ()

let psExpect (ttype:TokenType) (ps:ParseState) =
  psExpectMsg ttype ps "non expected token"

let psConsume (ttype:TokenType) (ps:ParseState) =
  psExpect ttype ps
  psNext ps

let psMulConsume ttypes ps =
  let consOne = fun p tt -> psConsume tt p
  slice.Fold consOne ps ttypes

let psIdentName (ps:ParseState) =
  psExpect IDENTIFIER ps
  let cur = psCurrent ps
  cur.stringVal

let psStringVal (ps:ParseState) =
  psExpect STRING ps
  let cur = psCurrent ps
  cur.stringVal

let psStrNx (f: ParseState->string) (ps:ParseState) =
  let s = f ps
  let ps2 = psNext ps
  (ps2, s)


// psIdentName and Next
let psIdentNameNx (ps:ParseState) =
  psStrNx psIdentName ps

let psStringValNx (ps:ParseState) =
  psStrNx psStringVal ps

// NxL means NextNOL
let psIdentNameNxL (ps:ParseState) =
  psIdentNameNx ps |> MapL psSkipEOL

let psStringValNxL (ps:ParseState) =
  psStringValNx ps |> MapL psSkipEOL

let psResetTmpCtx (ps:ParseState) =
  resetUniqueTmpCounter ()
  newTypeVarCtx ()
  |> psWithTVCtx ps

let psIsNeighborLT (ps:ParseState) =
   tkzIsNeighborLT ps.tkz

let ParseSepList one sep ps =
   let endPred = psCurIsNot sep
   let next = psConsume sep
   ParseList2 one endPred next ps


let scRegFunFac (sc:Scope) (fname:string) (ff:FuncFactory) =
  scRegisterVarFac sc fname (GenFuncVar fname ff)

/*
UnionDef related utility.
*/

// used for csIsVar cases. No Tparams.
let udToUtOnly (ud:UnionDef) =
  {UnionType.Name=ud.Name}

/*
// New_IntOrString_I
let csConstructorName  (unionName: string) (cas: NameTypePair) =
*/
let csRegisterCtor (sc:Scope) (ud: UnionDef) (cas: NameTypePair) =
  let ctorName = csConstructorName ud.Name cas
  if csIsVar ud.Tparams cas then
    let ut = udToUtOnly ud |> FUnion
    {Var.Name=ctorName; Ftype=ut}
    |> scDefVar sc cas.Name
  else
    let targs = slice.Map newTvf ud.Tparams
    let uf = udToUniFac ud
    let ut = GenUnionType uf targs |> FUnion
    let tps = [cas.Ftype; ut]
    let ffac = {Tparams=ud.Tparams; Targets=tps}
    scRegisterVarFac sc cas.Name (GenFuncVar ctorName ffac)

let udRegisterCsCtors (sc:Scope) (ud:UnionDef) =
  udCases ud |> slice.Iter (csRegisterCtor sc ud)


/*
PackageInfo related utility.
*/

let piFullName (pi:PackageInfo) (name:string) =
  if pi.Name = "_" then
    name
  else
    pi.Name + "." + name

let piRegEType (pi:PackageInfo) (tname:string) (tparams:[]string) =
  let fullName = piFullName pi tname
  let tfd = {Name=fullName; Tparams=tparams}
  dict.Add pi.TypeInfo tname tfd
  tfd



let scRegTFData (sc:Scope) (tname:string) (tfd:TypeFactoryData) =
  scRegisterTypeFac sc tname (GenType tfd)


// register function factory
let piRegFF (pi:PackageInfo) (fname:string) (ff:FuncFactory) (ps:ParseState) =
  dict.Add pi.FuncInfo fname ff
  scRegFunFac ps.scope fname ff
  ps

let regFF (pi:PackageInfo) (sc:Scope) (sff:string*FuncFactory) =
  let (ffname, ff) = sff
  let fullName = piFullName pi ffname 
  scRegFunFac sc fullName ff

let regTF  (pi:PackageInfo) (sc:Scope) (etp:string*TypeFactoryData) =
  let tfd = frt.Snd etp
  scRegTFData sc tfd.Name tfd

let piRegAll (pi:PackageInfo) (sc:Scope) =
  dict.KVs pi.FuncInfo
  |> slice.Iter (regFF pi sc)
  dict.KVs pi.TypeInfo
  |> slice.Iter (regTF pi sc)


/*
  TypeDef related.
  Register type info to TypeDefCtx, etc.
*/

let rdToRecFac (rd:RecordDef) =
  // golang complaint:
  // S1016 - Use a type conversion instead of manually copying struct fields 
  // {RecordType.Name=rd.Name; Fields=rd.Fields}
  GoEval<RecordFactory> "RecordFactory(rd)"

let psRegRecDefToTDCtx (rd:RecordDef) (ps:ParseState) =
  let rfac = rdToRecFac rd
  scRegisterRecFac ps.scope rd.Name rfac
  // If no type parameter, RecordType is set to defined.
  // This is used for forward decl.
  // If there is type parameter, it is impossible to use it beforehand.
  let (rtype, ok) = tryRecFacToRecType rfac
  if ok then
    dict.Add ps.tdctx.defined rtype.Name (FRecord rtype)

let psRegUdToTDCtx (ud:UnionDef) (ps:ParseState) =
  let sc = ps.scope
  let ufac = udToUniFac ud
  udRegisterCsCtors sc ud
  scRegisterTypeFac sc ud.Name (GenUnionFType ufac)
  // If no type parameter, UnionType is set to defined.
  // This is used for forward decl.
  // If there is type parameter, it is impossible to use it beforehand.
  let (utype, ok) = tryUniFacToUniType ufac
  if ok then
    dict.Add ps.tdctx.defined utype.Name (FUnion utype)

/*
  MultipleDefs resolve forward declaration, etc.
*/

let transTVByTDCtx (tdctx:TypeDefCtx) (tv:TypeVar) =
  let (rname, ok) = dict.TryFind tdctx.allocedDict tv.Name
  if ok then
    let (nt, ok2) = dict.TryFind tdctx.defined rname
    if ok2 then
      nt
    else
      frt.Sprintf1 "Unresolved foward decl type: %s" rname
      |> PanicNow
      nt
  else
    FTypeVar tv

let resolveFwrdDecl (ps:ParseState) (md:MultipleDefs) : MultipleDefs =
  let transTV = transTVByTDCtx ps.tdctx
  let transD = transTVDefStmt transTV
  let ndefs = slice.Map transD md.Defs
  {Defs=ndefs}

let scRegDefStmtType (sc:Scope) (df: DefStmt) =
  match df with
  | DRecordDef rd ->
    rdToRecFac rd
    |>  scRegisterRecFac sc rd.Name
  | DUnionDef ud ->
    udRegisterCsCtors sc ud
    let ufac = udToUniFac ud
    scRegisterTypeFac sc ud.Name (GenUnionFType ufac)

let psRegMdTypes (md:MultipleDefs) (ps:ParseState) =
  slice.Iter (scRegDefStmtType ps.scope) md.Defs

