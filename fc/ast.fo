package main

import frt
import dict

type GoEvalExpr = {GoStmt: string; TypeArg: FType}
type Var = {Name: string; Ftype: FType}

// type specified var ref
// like NewDict<string, int>
type SpecVar = {Var: Var; SpecList: []FType}

type VarRef =
| VRVar of Var
| VRSVar of SpecVar

let varRefName (vr:VarRef) =
  match vr with
  | VRVar v -> v.Name
  | VRSVar sv -> sv.Var.Name

let varRefVar (vr:VarRef) =
  match vr with
  | VRVar v -> v
  | VRSVar sv -> sv.Var

let varRefVarType (vr:VarRef) =
   let v = varRefVar vr
   v.Ftype

let transVarVR (transV:Var->Var) (vr: VarRef) =
  match vr with
  | VRVar v -> transV v |> VRVar
  | VRSVar sv ->
    let nv = transV sv.Var
    {SpecVar.Var=nv; SpecList=sv.SpecList}
    |> VRSVar
  

/*
Union case matching.
Only support variable match for a while:
| I i -> ...
| Record r -> ...
*/
type MatchPattern = {CaseId: string; VarName: string}

// external package func info.
type FuncFactory = {Tparams:[]string; Targets:[]FType}

// external package type info, TypeFactory is already used. So call TyeFactoryData
type TypeFactoryData = {Name: string; Tparams:[]string}

type Expr =
| EGoEvalExpr of GoEvalExpr
| EStringLiteral of string
| ESInterP of string // string interpolation.
| EIntImm of int
| EUnit
| EBoolLiteral of bool
| EFunCall of FunCall
| EFieldAccess of FieldAccess
| EVarRef of VarRef
| ESlice of []Expr
| ERecordGen of RecordGen
| ELazyBlock of LazyBlock
| ETupleExpr of []Expr
| ELambda of LambdaExpr
| EBinOpCall of BinOpCall
/*
  For some expr, normally we need to wrap with func() to become expr in go stmt
  But in some case like final expr of block, just return is enough and do not need to wrap func().
  We use type ReturnableExpr for expr of which we can emit directlry return go code.
*/
| EReturnableExpr of ReturnableExpr
and FunCall = {TargetFunc: VarRef; Args: []Expr}
and LambdaExpr = {Params: []Var; Body:Block}
and FieldAccess = {TargetExpr: Expr; FieldName: string} // stands for record field access of form: targetName.FieldName
and BinOpCall = {Op: string; Rtype: FType; Lhs: Expr; Rhs: Expr}
and NEPair = {Name: string; Expr: Expr}
and RecordGen = {FieldsNV: []NEPair; RecordType: RecordType}
and Block = {Stmts: []Stmt; FinalExpr: Expr}
and LazyBlock = {Block: Block}
and MatchRule = {Pattern: MatchPattern; Body: Block}
and MatchExpr = {Target: Expr; Rules: []MatchRule}
and ReturnableExpr =
| RBlock of Block
| RMatchExpr of MatchExpr
and Stmt =
| SLetVarDef of LLetVarDef
| SExprStmt of Expr
and RootStmt =
| RSImport of string
| RSPackage of string
| RSPackageInfo of PackageInfo
| RSDefStmt of DefStmt
| RSMultipleDefs of MultipleDefs
| RSRootFuncDef of RootFuncDef
and LetFuncDef = {Fvar: Var; Params: []Var; Body:Block}
and RootFuncDef = {Tparams:[]string; Lfd:LetFuncDef}
and LetVarDef = {Lvar: Var; Rhs: Expr}
and LetDestVarDef = {Lvars: []Var; Rhs: Expr}
and LLetVarDef =
| LLOneVarDef of LetVarDef
| LLDestVarDef of LetDestVarDef
and PackageInfo = {Name: string; FuncInfo: dict.Dict<string, FuncFactory>; TypeInfo: dict.Dict<string, TypeFactoryData>}
and RecordDef = {Name: string; Tparams:[]string; Fields: []NameTypePair}
and UnionDef = {Name: string; CasesPtr: NTPsPtr}
and DefStmt =
| DRecordDef of RecordDef
| DUnionDef of UnionDef
and MultipleDefs = {Defs: []DefStmt}

let NewPackageInfo (name:string) =
  let ffd = dict.New<string, FuncFactory> ()
  let tfdd = dict.New<string, TypeFactoryData> ()
  {Name=name; FuncInfo=ffd; TypeInfo=tfdd}

let NewUnionDef name cases =
  let ptr = NewNTPsPtr cases
  {UnionDef.Name=name; CasesPtr=ptr}

let udUpdate (ud:UnionDef) cases =
  NTPsUpdate ud.CasesPtr cases

let udCases (ud:UnionDef) =
  NTPsPtrGet ud.CasesPtr

let varToExpr (v:Var) =
  VRVar v |> EVarRef
