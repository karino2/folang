package main

import frt
import slice

let parsePackage (ps:ParseState) =
  psConsume PACKAGE ps
  |> psIdentNameNxL
  |> MapR RSPackage

let parseImport (ps:ParseState) =
  let ps2 = psConsume IMPORT ps
  if psCurIs IDENTIFIER ps2 then
    // fail to infer in tinyfor. So I do not use pipeline here.
    let (ps3, iname) = psIdentNameNxL ps2
    let rstmt = frt.Sprintf1 "github.com/karino2/folang/pkg/%s" iname |> RSImport
    (ps3, rstmt)
  else
    ps2 
    |> psStringValNxL
    |> MapR RSImport

let parseFullName (ps:ParseState) : ParseState*string =
   let (ps2, one) = psIdentNameNx ps
   if (psCurrentTT ps2) = DOT then
     let (ps3, rest) = psConsume DOT ps2 |> parseFullName
     (ps3, (one + "." + rest))
   else
     (ps2, one)

/*
  TYPE_LIST = TYPE (',' TYPE)*
*/
let parseTypeList (pType: ParseState->ParseState*FType) (ps:ParseState) : ParseState*[]FType =
  let (ps2, one) = pType ps
  if psCurIs COMMA ps2 then
    psConsume COMMA ps2
    |> parseTypeList pType
    |> MapR (slice.PushHead one)
  else
    (ps2, [one])

/*
  if cur is '<', parse '<' TYPE_LIST '>',
  else return empty type list with current ps.
*/
let mightParseSpecifiedTypeList (pType:ParseState->ParseState*FType) (ps:ParseState) =
  if psCurIs LT ps then
    psConsume LT ps
    |> (parseTypeList pType)
    |> MapL (psConsume GT)
  else
    emptyFtps ()
    |> NPair ps


/*
  ATOM_TYPE = 'string' | 'int' | '(' ')' | REGISTERED_TYPE | '(' TYPE ')'
*/
let parseAtomType (pType:ParseState->ParseState*FType) (ps:ParseState) =
  let tk = psCurrent ps
  match tk.ttype with
  | LPAREN ->
    let ps2 = psConsume LPAREN ps
    if (psCurrentTT ps2) = RPAREN then
      let ps3 = psConsume RPAREN ps2
      (ps3, FUnit)
    else
      pType ps2
      |> MapL (psConsume RPAREN)
  | IDENTIFIER ->
    let tname = tk.stringVal
    let ps3 = psNext ps
    if tname = "string" then
      (ps3, FString)
    elif tname = "int" then
      (ps3, FInt)
    elif tname = "bool" then
      (ps3, FBool)
    elif tname = "float" then
      (ps3, FFloat)
    elif tname = "any" then
      (ps3, FAny)
    else
      let (ps4, fullName) = parseFullName ps
      let (tfac, ok) = scLookupTypeFac ps3.scope fullName
      if ok then
        mightParseSpecifiedTypeList pType ps4
        |> MapR tfac
      elif psInsideTypeDef ps4 then
        // unknown type inside type def.
        // This might be defined in later 'and'
        // So return typevar of TypeVarCtx and replace later
        let tvarf = tdctxTVFAlloc ps4.tdctx fullName
        (ps4, tvarf)
      else
        frt.Panicf1 "type not found: %s." fullName
        (ps4, FUnit)
  | _ ->
    psPanic ps "Unknown type"
    (ps, FUnit)



/*
  TERM_TYPE = ATOM_TYPE | TUPLE_TYPE
  TUPLE_TYPE = ATOM_TYPE '*' ELEM_TYPE ('*' ELEM_TYPE)*

  []T*U should parse [](T*U).
  So tuple is higher precedance.

  But T*[]U is also valid. So right hand side must be ELEM_TYPE.
*/
let parseTermType (pType:ParseState->ParseState*FType) (pElem:ParseState->ParseState*FType) (ps:ParseState) : ParseState*FType =
  let pAtom = parseAtomType pType
  let (ps2, ft) = pAtom ps
  if (psCurrentTT ps2) = ASTER then
    let (ps3, ft2) = psConsume ASTER ps2
                      |> pElem
    if (psCurrentTT ps3) = ASTER then
      psPanic ps3 "More than three elem tuple, NYI"
    {ElemTypes=[ft;ft2]}
    |> FTuple
    |> NPair ps3
  else
    (ps2, ft)


/*
ELEM_TYPE = TERM_TYPE | '[' ']' ELEM_TYPE

[]T*U should parse [](T*U)
*/
let parseElemType (pType: ParseState->ParseState*FType) (ps:ParseState) : ParseState*FType =
  let recurse = parseElemType pType
  if psCurIs LSBRACKET ps then
    let (ps2, et) = psConsume LSBRACKET ps
                    |> psConsume RSBRACKET
                    |> recurse
    {SliceType.ElemType=et}
    |> FSlice
    |> NPair ps2
  else
    parseTermType pType recurse ps

/*
  TYPE_ARROWS = ELEM_TYPE ('->' ELEM_TYPE)*

  return []FType
*/
let parseTypeArrows (pType:ParseState->ParseState*FType) (ps:ParseState) : ParseState*[]FType =
  let (ps2, one) = parseElemType pType ps
  if (psCurrentTT ps2) = RARROW then
    psConsume RARROW ps2
    |> parseTypeArrows pType
    |> MapR (slice.PushHead one)
  else
    (ps2, [one])

/*
  TYPE =  TERM_TYPE | FUNC_TYPE
*/
let parseType (ps:ParseState) : ParseState*FType =
  let (ps2, tps) = parseTypeArrows parseType ps
  if (slice.Length tps) = 1 then
    slice.Head tps |> NPair ps2
  else
    newFFunc tps
    |> NPair ps2

type Param =
| PVar of Var
| PUnit

let psNewTypeVar (ps:ParseState) =
  let tgen = psTypeVarGen ps
  tgen ()

/*
	PARAM = '(' ')'
				|	'(' IDENTIFIER : TYPE ')'
        | IDENTIFIER
*/
let parseParam (ps:ParseState) =
  match psCurrentTT ps with
  | LPAREN ->
    let ps2 = psConsume LPAREN ps
    let tk = psCurrent ps2
    match tk.ttype with
    | RPAREN ->
      let ps3 = psConsume RPAREN ps2
      (ps3, PUnit)
    | _ ->
      let vname = psIdentName ps2
      let (ps3, tp) = psNext ps2
                      |> psConsume COLON
                      |> parseType
                      |> MapL (psConsume RPAREN)
      let v = {Var.Name=vname; Ftype=tp}
      scDefVar ps3.scope vname v
      (ps3, (PVar v))
  | IDENTIFIER ->
    let (ps2, vname) = psIdentNameNx ps
    let ftv = psNewTypeVar ps2 |> FTypeVar
    let v = {Var.Name=vname; Ftype=ftv}
    scDefVar ps2.scope vname v
    (ps2, (PVar v))

let parseParams (ps:ParseState) : ParseState*[]Var =
  let (ps2, prm1) = parseParam ps
  match prm1 with
  | PUnit ->
      let zero = GoEval<[]Var> "[]Var{}"
      (ps2, zero)
  | PVar v ->
      let tt = psCurrentTT ps2
      match tt with
      | LPAREN ->
        parseParams ps2
        |> MapR (slice.PushHead v)
      | IDENTIFIER ->
        parseParams ps2
        |> MapR (slice.PushHead v)
      | _ -> (ps2, [v])

/*
  GO_EVAL = 'GoEval' string | 'GoEval' '<' TYPE '>' string

  It should not have space between 'GoEval' and '<' though currently we just don't care those differences.
*/
let parseGoEval (ps:ParseState) =
  let ps2 = psNext ps
  match psCurrentTT ps2 with
  | LT ->
    let (ps3, ft) = psConsume LT ps2 |> parseType |> MapL (psConsume GT)
    let (ps4, s) = psStringValNx ps3
    let ge = {GoStmt=s; TypeArg=ft}
    (ps4, EGoEvalExpr ge)
  | STRING ->
    let (ps3, s) = psStringValNx ps2
    let ge = {GoStmt=s; TypeArg=FUnit}
    (ps3, EGoEvalExpr ge)
  | _ ->
    psPanic ps2 "Wrong arg for GoEval"
    (ps2, EUnit)


type fiInfo = {
  RecName: string; // "" if not specified.
  NePair: NEPair;
}

/*
  FIELD_INITIALIZER = IDENTIFIER '=' expr | SPECIFIED_INITIALIZER

  Specified initializer specify record name like: {myRec.X = 3; Y=4; Z=5}

  SPECIFIED_INITIALIZER = IDENTIFIER '.' IDENTIFIER '=' expr

  return ps* (string*NEPair) where string contains recname if present ("" if not).
*/
let parseFiIni (parseE: ParseState->ParseState*Expr) (ps:ParseState) =
  let (ps2, fname) = psIdentNameNxL ps
  if psCurIs DOT ps2 then
    let (ps3, fname2) = psConsume DOT ps2 |> psIdentNameNxL
    let (ps4, expr) = psConsume EQ ps3 |> psSkipEOL |> parseE
    let fi = {Name=fname2;Expr=expr}
    (ps4, {RecName=fname; NePair=fi})
  else
    let (ps3, expr) = ps2 |> psConsume EQ |> psSkipEOL |> parseE
    let fi = {Name=fname;Expr=expr}
    (ps3, {RecName=""; NePair=fi})

type fiListInfo = {
  RecName: string; // "" if not specified.
  NePairs: []NEPair;
}

let parseFieldInitializers (parseE: ParseState->ParseState*Expr) (ps:ParseState) : ParseState*fiListInfo =
  let (ps2, fii) = parseFiIni parseE ps
  let nep = fii.NePair
  let recN = fii.RecName
  if (psCurrentTT ps2) = RBRACE then
    (ps2, {RecName=recN; NePairs=[nep]})
  else
    let (ps3, fiInfos) = psConsume SEMICOLON ps2
                      |> parseFieldInitializers parseE
    let recN2 = fiInfos.RecName
    let neps = fiInfos.NePairs
    let neps2 = slice.PushHead nep neps
    let recN3 = if recN <> "" then recN else recN2
    (ps3, {RecName=recN3; NePairs=neps2})

let retRecordGen (ok:bool) (rfac: RecordFactory) (neps: []NEPair) (ps:ParseState) =
  if ok then
    let rtype = psTypeVarGen ps |> GenRecordTypeByTgen rfac
    {FieldsNV=neps; RecordType=rtype}
    |> ERecordGen |> NPair ps
  else
    psPanic ps "can't find record type."
    (ps, EUnit)


/*
  RECORD_EXPRESISONN = '{' FIELD_INITIALIZERS '}'
  FIELD_INITIALIZERS = FIELD_INITIALIZER (';' FIELD_INITIALIZER)*
  FIELD_INITIALIZER = IDENTIFIER '=' expr | SPECIFIED_INITIALIZER

  Specified initializer specify record name like: {myRec.X = 3; Y=4; Z=5}

  SPECIFIED_INITIALIZER = IDENTIFIER '.' IDENTIFIER '=' expr
*/
let parseRecordGen (parseE: ParseState->ParseState*Expr) (ps:ParseState) =
  let (ps2, fiInfos) = psConsume LBRACE ps |> parseFieldInitializers parseE |> MapL (psConsume RBRACE)
  let neps = fiInfos.NePairs
  let recName = fiInfos.RecName
  if recName = "" then
    let (rfac, ok) = slice.Map _.Name neps |> scLookupRecFac ps2.scope
    retRecordGen ok rfac neps ps2
  else
    let (rfac, ok) = scLookupRecFacByName ps2.scope recName
    retRecordGen ok rfac neps ps2

let refVar (vname:string) (stlist:[]FType) (ps:ParseState) =
  let (vfac, ok) = scLookupVarFac ps.scope vname
  if ok then
    psTypeVarGen ps |> vfac stlist |> EVarRef
  else
    frt.Sprintf1 "Unknown var ref: %s" vname
    |> psPanic ps
    EUnit

/*
  Parsing like field access.
  a.b.c.d

  comeing here on dot for recurse.
  This is workaround because this can't handle like "(fc a b).c".
  We'll parse more seriously later.
*/
let parseFAAfterDot (ps:ParseState) (cur:Expr) : (ParseState*Expr) =
  let (ps2, fname) =  psConsume DOT ps
                      |> psIdentNameNx
  let fexpr = {TargetExpr=cur; FieldName=fname}
              |> EFieldAccess
  if psCurIs DOT ps2 then
    parseFAAfterDot ps2 fexpr
  else
    (ps2, fexpr)




/*
  VARIABLE_REF = VARIABLE_REF_BASE ('<' TYPE_LIST '>')
  VARIABLE_REF_BASE = IDENTIFIER | IDENTIFER '.' IDENTIFIER

  For first case, IDENTIFIER must be in scope.
  For later case, there are 2 types:
    - external pkg access: slice.Take
    - record field access: rec.Person

  between VARIABLE_REF_BASE and '<', there must not be space to distinguish "a < b > 3" and "a<b>".
  This is special.
*/
let parseVarRef (ps:ParseState) =
  let firstId = psIdentName ps
  let (ps2, stlist) = if psIsNeighborLT ps then
                        psNext ps
                        |> mightParseSpecifiedTypeList parseType
                      else
                        emptyFtps ()
                        |> NPair (psNext ps)
  if (psCurrentTT ps2) <> DOT then
    refVar firstId stlist ps2
    |> NPair ps2
  else
  	// Next is dot. Check whether rec field access or pkg access.
    let (vfac, ok) = scLookupVarFac ps2.scope firstId
    if ok then
  	  // symbol found, record field access.
      psTypeVarGen ps2 |> vfac (emptyFtps ()) |> EVarRef
      |> parseFAAfterDot ps2
    else
      // external pkg access.
      // use original ps for parseFullName
      let (ps3, fullName) = parseFullName ps
      let (ps4, stlist) = mightParseSpecifiedTypeList parseType ps3
      refVar fullName stlist ps4
      |> NPair ps4

let isSemiExprEnd ps =
  (psCurrentTT ps) <> SEMICOLON 

// expr (; expr)*
let parseSemiExprs (pExpr: ParseState->ParseState*Expr) (ps:ParseState) : ParseState*[]Expr =  
  ParseList2 pExpr isSemiExprEnd (psConsume SEMICOLON) ps

/*
  SLICE_EXPR = '[' expr (; expr)* ']'
*/
let parseSliceExpr (pExpr: ParseState->ParseState*Expr) (ps:ParseState) =
   psConsume LSBRACKET ps
   |> parseSemiExprs pExpr
   |> MapL (psConsume RSBRACKET)
   |> MapR ESlice

let exprOnlyBlock (expr:Expr) =
  let emp = slice.New<Stmt> ()
  {Block.Stmts=emp; FinalExpr=expr}

/*
  US_PROP_AC = '_' '.' IDENT

  convert to: fun _V0 -> _V0.IDENT
*/
let parseUSPropAcc ps = 
  let (ps2, fname) = psConsume UNDER_SCORE ps
                      |> psConsume DOT
                      |> psIdentNameNx
  let tname = uniqueTmpVarName ()
  let ttype = psNewTypeVar ps2 |> FTypeVar
  let tmpVar = {Var.Name=tname; Ftype=ttype}
  let vexpr = varToExpr tmpVar
  let faExpr = {TargetExpr=vexpr; FieldName=fname} |> EFieldAccess
  let body = exprOnlyBlock faExpr
  {LambdaExpr.Params=[tmpVar]; Body=body}
  |> ELambda
  |> NPair ps2

/*
  ATOM = LITERAL | (EXPR) | RECORD_GEN | SLICE_EXPR | VAR_REF | US_PROP_AC
*/
let parseAtom (parseE: ParseState->ParseState*Expr) (ps:ParseState) =
  let cur = psCurrent ps
  let pn = psNext ps
  match cur.ttype with
  | STRING ->
    EStringLiteral cur.stringVal |> NPair pn
  | SINTERP ->
    ESInterP cur.stringVal |> NPair pn
  | INT_IMM ->
    EIntImm cur.intVal |> NPair pn
  | TRUE ->
    EBoolLiteral true |> NPair pn
  | FALSE ->
    EBoolLiteral false |> NPair pn
  | LBRACE ->
    parseRecordGen parseE ps
  | LSBRACKET ->
    parseSliceExpr parseE ps
  | LPAREN ->
    if (psCurrentTT pn) = RPAREN then
      (pn, EUnit) |> MapL (psConsume RPAREN)
    else
      let (ps2, e1) = parseE pn
      if (psCurrentTT ps2) = COMMA then
        let (ps3, e2) = psConsume COMMA ps2
                        |> parseE
        if (psCurrentTT ps3) = COMMA then
          psPanic ps3 "only pair is supported for tuple expr."
        [e1; e2]
        |> ETupleExpr
        |> NPair (psConsume RPAREN ps3)
      else
        (ps2, e1)
        |> MapL (psConsume RPAREN)
  | UNDER_SCORE ->
    parseUSPropAcc ps
  | IDENTIFIER ->
    if cur.stringVal = "GoEval" then
      parseGoEval ps
    else
      parseVarRef ps
  | _ ->
    psPanic ps "Unown atom."
    (ps, EUnit)

let psCurIsBinOp (ps:ParseState) =
  let (_, ok) = lookupBinOp (psCurrentTT ps)
  ok

let psNextNonEOLIsBinOp (ps:ParseState) =
  psSkipEOL ps
  |> psCurIsBinOp

let isEndOfTerm (ps:ParseState) =
  match psCurrentTT ps with
  | EOF -> true
  | EOL -> true
  | SEMICOLON -> true
  | RBRACE -> true
  | RPAREN -> true
  | RSBRACKET -> true
  | WITH -> true
  | THEN -> true
  | ELSE -> true
  | COMMA -> true
  | _ -> 
    psNextNonEOLIsBinOp ps

let parseAtomList (parseE: ParseState->ParseState*Expr) (ps:ParseState) : ParseState*[]Expr =
  let (ps2, one) = parseAtom parseE ps
  if isEndOfTerm ps2 then
    (ps2, [one])
  else
    parseAtomList parseE ps2
    |> MapR (slice.PushHead one)


/*
  MATCH_RULE = '|' IDENTIFIER IDENTIFIER '->' BLOCK
            |  '|' '_' '->' BLOCK

ex:
	| Record r -> hoge r
  | _-> ""
*/
let parseMatchRule (pBlock: ParseState->ParseState*Block) (target:Expr) (ps:ParseState) =
  let ps2 = psConsume BAR ps
  match psCurrentTT ps2 with
  | UNDER_SCORE -> // default case
    let (ps3, block) = psConsume UNDER_SCORE ps2
                      |> psConsume RARROW
                      |> psSkipEOL
                      |> pBlock
    //  return &MatchRule{&MatchPattern{"_", ""}, block}
    let mp = {CaseId="_"; VarName=""}
    {Pattern=mp; Body=block}
    |> NPair ps3
  | _ -> // normal case
    let (ps3, cname) = psIdentNameNx ps2
    let (ps4, vname) = match (psCurrentTT ps3) with
                        | RARROW ->
                          // no content case. use "".
                          (ps3, "")
                        | UNDER_SCORE ->
                          (ps3, "_") |> MapL psNext
                        | _ ->
                           psIdentNameNx ps3
    let ps5 = psConsume RARROW ps4 |> psSkipEOL |> psPushScope
    if vname <> "" && vname <> "_" then
      let tt = ExprToType target
      // currently, match expect union type
      let fu = GoEval<UnionType> "tt.(FType_FUnion).Value"
      let cp = lookupCase fu cname
      scDefVar ps5.scope vname {Var.Name=vname; Ftype=cp.Ftype}
    let (ps6, block) = pBlock ps5 |> MapL psPopScope
    let mp = {CaseId=cname; VarName=vname}
    {Pattern=mp; Body=block}
    |> NPair ps6

let insideOffside (ps:ParseState) =
  let curCol = psCurCol ps
  let curOff = psCurOffside ps
  curCol >= curOff

let parseMatchRules (pBlock: ParseState->ParseState*Block) (target:Expr) (ps:ParseState) : ParseState*[]MatchRule =
  let (ps2, one) = parseMatchRule pBlock target ps |> MapL psSkipEOL
  if (psCurrentTT ps2) = BAR && insideOffside ps2 then
    parseMatchRules pBlock target ps2 |> MapR (slice.PushHead one)
  else
    (ps2, [one])

/*
  MATCH_EXPR = 'match' EXPR 'with' EOL MATCH_RULE+
*/
let parseMatchExpr (pExpr: ParseState->ParseState*Expr) (pBlock: ParseState->ParseState*Block) (ps:ParseState) =
  let (ps2, target) = psConsume MATCH ps |> pExpr |> MapL (psConsume WITH) |> MapL psSkipEOL
  let (ps3, rules) = parseMatchRules pBlock target ps2
  {Target=target; Rules=rules} |> NPair ps3


/*
  parseIfExpr related
*/


/*
parse single expr and return as block.
This is occur like 'if c then XX else YY' oneliner.
*/
let parseInlineBlock (pExpr: ParseState->ParseState*Expr) (ps:ParseState) =
   let (ps2, expr) = pExpr ps
   exprOnlyBlock expr
   |> NPair ps2

/*
IF_EXPR = 'if' expr 'then' block (('elif' expr 'then' block)* 'else' block)?

But for elif, this function parse just after if symbol.
*/
let parseIfAfterIfExpr (pExpr:ParseState->ParseState*Expr) (pBlock:ParseState->ParseState*Block) (ps:ParseState) : ParseState*Expr =
  let (ps2, cond) = pExpr ps |> MapL (psConsume THEN)
  let tgen = psTypeVarGen ps2
  let recurse = parseIfAfterIfExpr pExpr pBlock
  if psCurIs EOL ps2 then
    let (ps3, tbody) = psSkipEOL ps2
                       |> pBlock
    let ps4 = psSkipEOL ps3
    if psCurIs ELSE ps4 then
      let (pse2, fbody) = psConsume ELSE ps4 |> psSkipEOL |> pBlock
      newIfElseCall tgen cond tbody fbody
      |> NPair pse2
    elif psCurIs ELIF ps4 then
      let (ps5, elseExpr) = psConsume ELIF ps4
                           |> recurse
      let ebody = exprOnlyBlock elseExpr
      newIfElseCall tgen cond tbody ebody
      |> NPair ps5
    else
      // if only. use ps before skip eol
      newIfOnlyCall tgen cond tbody
      |> NPair ps3
  else
		// one line case: if COND then TBODY else FBODY
    let (psi2, tbody) = parseInlineBlock pExpr ps2
    if psCurIs ELSE psi2 then
      let (psi3, fbody) = psConsume ELSE psi2 |> parseInlineBlock pExpr
      newIfElseCall tgen cond tbody fbody
      |> NPair psi3
    else
      newIfOnlyCall tgen cond tbody
      |> NPair psi2


/*
IF_EXPR = 'if' expr 'then' block (('elif' expr 'then' block)* 'else' block)?

- expr must bo bool type.
- both block must be the same return type.
- if there is EOL after 'then', it assumue offside block
- if there is no else block, block return type must be unit.
*/
let parseIfExpr (pExpr:ParseState->ParseState*Expr) (pBlock:ParseState->ParseState*Block) (ps:ParseState) : ParseState*Expr =
  psConsume IF ps
  |> parseIfAfterIfExpr pExpr pBlock

let tvgen2ftvgen (tgen:()->TypeVar) =
  tgen () |> FTypeVar


let updateFunCallFunType (tgen:()->TypeVar) (res:Resolver) (vr: VarRef) (args:[]Expr) =
  match vr with
  | VRVar v ->
    match v.Ftype with
    | FFunc _ -> vr // no need to resolve
    | FTypeVar tv ->
      // (f arg0 arg1) and f is TypeVar.
      // We can update to (t0->t1->NewTVar)
      let ntv = tgen () |> FTypeVar
      let nftype = slice.Map ExprToType args
                   |> slice.PushLast ntv
                   |> newFFunc
      // unify v.Ftype to nftype.
      {SrcV=tv.Name; Dest=nftype}
      |> updateResOne res
      {Var.Name=v.Name; Ftype=nftype}
      |> VRVar
  | VRSVar _ -> vr // currently, this case is just NYI.

/*
  FUNC_EXPR = 'fun' PARAMS '->' block
*/
let parseFunExpr (pBlock:ParseState->ParseState*Block) ps =
  let (ps2, params) = psConsume FUN ps |> psPushScope |> parseParams |> MapL (psConsume RARROW)
  let (ps3, body) = pBlock ps2 |> MapL psPopScope
  (ps3, ELambda {LambdaExpr.Params=params; Body=body} )

let parseTerm (pExpr: ParseState->ParseState*Expr) (pBlock: ParseState->ParseState*Block) (ps:ParseState) : ParseState*Expr =
  match psCurrentTT ps with
  | MATCH ->
     parseMatchExpr pExpr pBlock ps
     |> MapR RMatchExpr |> MapR EReturnableExpr
  | LSBRACKET -> parseSliceExpr pExpr ps
  | FUN ->
    parseFunExpr pBlock ps
  | IF -> parseIfExpr pExpr pBlock ps 
  | NOT ->
    let (ps2, target) = psConsume NOT ps |> parseTerm pExpr pBlock
    newUnaryNotCall (psTypeVarGen ps2) target
    |> NPair ps2
  | _ ->
    let (ps2, es) = parseAtomList pExpr ps
    if (slice.Length es) = 1 then
      (ps2, (slice.Head es))
    else
      // funcall
      let head = slice.Head es
      let tail = slice.Tail es
      match head with
      | EVarRef vr ->
        let tgen = psTypeVarGen ps2
        let nvr = updateFunCallFunType tgen ps2.tvc.resolver vr tail
        let fc = {TargetFunc=nvr; Args=tail}
        (ps2, EFunCall fc)
      | _ ->
        psPanic ps2 "Funcall head is not var"
        (ps2, head)

let lookupBinOpNF (tk:TokenType) =
  let res = lookupBinOp tk
  frt.Fst res

// for recursive call, extract binop later parse.
let parseBinAfter (pEwithMinPrec: int->ParseState->ParseState*Expr) (minPrec: int) (ps:ParseState) (cur:Expr): ParseState*Expr =
  let ps2 = psSkipEOL ps
  if psCurIsBinOp ps2 then
    let btk = psCurrentTT ps2
    let bop = lookupBinOpNF btk
    if bop.Precedence < minPrec then
      (ps, cur)
    else
      let (ps3, rhs) = psConsume btk ps2
                       |> pEwithMinPrec (bop.Precedence+1)
      let tvgen = psTypeVarGen ps3
      newBinOpCall tvgen btk bop cur rhs
      |> parseBinAfter pEwithMinPrec minPrec ps3
  else
    (ps, cur)

/*
EXPR = TERM (BINOP EXPR)*
*/
let parseExprWithPrec (pBlock: ParseState->ParseState*Block) (minPrec: int) (ps:ParseState) : ParseState*Expr =
  let pExpr = parseExprWithPrec pBlock 1
  let (ps2, expr) = parseTerm pExpr pBlock ps
  let ps3 = psSkipEOL ps2
  if psCurIsBinOp ps3 then
    parseBinAfter (parseExprWithPrec pBlock) minPrec ps3 expr
  else
    (ps2, expr)



let parseExpr (pBlock: ParseState->ParseState*Block) (ps:ParseState) : ParseState*Expr =
  parseExprWithPrec pBlock 1 ps

/*
  parseBlock related.
*/

// STMT = LET_STMT | EXPR
let parseStmt (pExpr: ParseState->ParseState*Expr) (pLet: ParseState->ParseState*LLetVarDef) (ps:ParseState) =
  match psCurrentTT ps with
  | LET ->
    pLet ps |> MapR SLetVarDef  
  | _ ->
    pExpr ps |> MapR SExprStmt


let isEndOfBlock (ps:ParseState) =
  let isOffside = (psCurCol ps) < (psCurOffside ps)
  // for (fun x -> x+2), RPAREN must be end of block.
  isOffside || (psCurIs EOF ps) || (psCurIs RPAREN ps)

let psStmtOneForList pExpr pLet ps =
  psForErrMsg ps
  parseStmt pExpr pLet ps |> MapL psSkipEOL

let parseStmtList (pExpr: ParseState->ParseState*Expr) (pLet: ParseState->ParseState*LLetVarDef) (ps:ParseState) : ParseState*[]Stmt =
  let pOne = psStmtOneForList pExpr pLet
  ParseList2 pOne isEndOfBlock (fun p->p) ps

/*
  BLOCK = EXPR | (STMT_LIKE EOL)* EXPR
  STMT_LIKE = LET_STMT | EXPR

  In some case, we wanto add local variables in block scope,
  in that case, it's handy to pushScope before calling this function.
*/
let parseBlockAfterPushScope (pExpr: ParseState->ParseState*Expr) (pLet: ParseState->ParseState*LLetVarDef) (ps:ParseState) =
  let (ps2, sls) = psPushOffside ps |> (parseStmtList pExpr pLet) |> MapL psPopOffside |> MapL psPopScope
  let last = slice.Last sls
  let stmts = slice.PopLast sls
  match last with
  | SExprStmt e ->
    (ps2, {Block.Stmts=stmts; FinalExpr=e})
  | _ ->
    psPanic ps2 "block of last is not expr"
    // dummy
    frt.Empty<Block> ()
    |> NPair ps2

let parseBlock (pLet: ParseState->ParseState*LLetVarDef) (ps:ParseState) : ParseState*Block =
  let pExpr = parseExpr (parseBlock pLet)
  psPushScope ps |> parseBlockAfterPushScope pExpr pLet

/*
  LL_ONE_VAR_DEF = 'let' IDENTIFIER '=' expr
*/
let parseLLOneVarDef (pExpr: ParseState->ParseState*Expr) (ps:ParseState) =
  let (ps2, vname) = psConsume LET ps |> psIdentNameNx |> MapL (psConsume EQ)
  let (ps3, rhs0) = pExpr ps2
  let rhs = InferExpr ps3.tvc rhs0
  let v = {Var.Name=vname; Ftype=(ExprToType rhs)}
  scDefVar ps3.scope vname v
  {LetVarDef.Lvar=v; Rhs=rhs}
  |> LLOneVarDef
  |> NPair ps3


let psIdentOrUSNameNx (ps:ParseState) =
  if psCurIs IDENTIFIER ps then
    psIdentNameNx ps
  else
    let ps2 = psNext ps
    (ps2, "_")

let defVarIfNecessary (sc:Scope) (v:Var) =
  if v.Name <> "_" then
    scDefVar sc v.Name v

/*
  Destructuring, only support pair for a while like:
  let (a, b) = ...

  LL_DEST_VAR_DEF = 'let' '(' IDENTIFIER ',' IDENTIFIER ')' '=' expr
*/
let parseLLDestVarDef (pExpr: ParseState->ParseState*Expr) (ps:ParseState) =
  let (ps2, vname1) = psConsume LET ps
                     |> psConsume LPAREN
                     |> psIdentOrUSNameNx
                     |> MapL (psConsume COMMA)
  let (ps3, vname2) = psIdentOrUSNameNx ps2
                     |> MapL (psConsume RPAREN)
                     |> MapL (psConsume EQ)
  let (ps4, rhs0) = pExpr ps3
  let rhs = InferExpr ps4.tvc rhs0
  let rtype = ExprToType rhs
  match rtype with
  | FTuple tup ->
    let v1 = {Var.Name=vname1; Ftype= slice.Head tup.ElemTypes}
    let v2 = {Var.Name=vname2; Ftype= slice.Last tup.ElemTypes}
    defVarIfNecessary ps4.scope v1
    defVarIfNecessary ps4.scope v2
    let vs = [v1; v2]
    {LetDestVarDef.Lvars=vs; Rhs=rhs}
    |> LLDestVarDef
    |> NPair ps4
  | FTypeVar _ ->
    // rhs is TypeVar (unresolved), so assign left vars new TypeVar's and resolve later.
    let tpgen = psTypeVarGen ps4
    let vt1 = if vname1 = "_" then
                FUnit // dont't care, use FUnit
              else
                tpgen () |> FTypeVar
    let vt2 = if vname1 = "_" then
                FUnit
              else
                tpgen () |> FTypeVar
    let v1 = {Var.Name=vname1; Ftype=vt1}
    let v2 = {Var.Name=vname2; Ftype=vt2}
    defVarIfNecessary ps4.scope v1
    defVarIfNecessary ps4.scope v2
    let vs = [v1; v2]
    {LetDestVarDef.Lvars=vs; Rhs=rhs}
    |> LLDestVarDef
    |> NPair ps4
  | _ ->
    psPanic ps2 "Destructuring let, but rhs is not tuple. NYI."
    let dummy = GoEval<[]Var> "[]Var{}"
    (ps2, LLDestVarDef {LetDestVarDef.Lvars=dummy; Rhs=EUnit})

/*
  LET_FUNC_DEF = 'let' IDENTIFIER PARAMS (':' TYPE)? '=' EOL? BLOCK
*/
let parseLetFuncDef (pLet: ParseState->ParseState*LLetVarDef) (ps:ParseState) =
  let ps2 = psConsume LET ps |> psPushScope
  let fname = psIdentName ps2
  let (ps3, params) = psNext ps2 |> parseParams
  let (ps4, rtypeDef) =  if psCurIs COLON ps3 then
                           psConsume COLON ps3 |> parseType
                         else
                           let tvgen = psTypeVarGen ps3
                           let tvf = tvgen() |> FTypeVar
                           (ps3, tvf) 
  let paramTypes = slice.Map _.Ftype params
  let defTargets = slice.PushLast rtypeDef paramTypes
  let defFt = newFFunc defTargets
  let defVar = {Var.Name=fname; Ftype=defFt}
  scDefVar ps4.scope fname defVar
  let (ps5, block) = psConsume EQ ps4 |> psSkipEOL |> parseBlock pLet |> MapL psPopScope
  let rtype = match rtypeDef with
              | FTypeVar _ ->
                // If rtypeDef is not specified, use block type
                blockToExpr block |> ExprToType
              | _ -> rtypeDef // else use specified def.
  let targets = if (slice.Length params) = 0 then
                  [FUnit; rtype]
                else
                  paramTypes
                  |> slice.PushLast rtype
  let ft = newFFunc targets
  let fnvar = {Var.Name=fname; Ftype=ft}
  {Fvar=fnvar; Params=params; Body=block}
  |> NPair ps5

let rfdToFuncFactory (rfd:RootFuncDef) =
  let targets = match rfd.Lfd.Fvar.Ftype with
                | FFunc ft ->
                  ft.Targets
                | _ ->
                  PanicNow  "root func def let with non func var, bug"
                  GoEval<[]FType> "[]FType{}"
  {Tparams=rfd.Tparams; Targets=targets}

let parseRootLetFuncDef (pLet: ParseState->ParseState*LLetVarDef) (ps:ParseState) =
  psForErrMsg ps
  let (ps2, lfd) = parseLetFuncDef pLet ps
  psForErrMsg ps // for infer error, let def start point is better error msg than end.
  let rfd = InferLfd ps2.tvc lfd
  rfdToFuncFactory rfd |> scRegFunFac ps2.scope rfd.Lfd.Fvar.Name
  (ps2, rfd)

/*
LET_VAR_DEF = LL_ONE_VAR_DEF | LL_DEST_VAR_DEF
*/
let parseLetVarDef (pExpr: ParseState->ParseState*Expr) (ps:ParseState) =
  let peekPs = psConsume LET ps
  if psCurIs LPAREN peekPs then
    parseLLDestVarDef pExpr ps
  else
    parseLLOneVarDef pExpr ps

/*
  LET = LET_DEST_VAR_DEF | LET_VAR_DEF | LET_FUNC_DEF

  LET_VAR_DEF = 'let' IDENTIFIER '=' expr
  LET_DEST_VAR_DEF = 'let' '(' IDENTIFIER, IDENTIFIER ')' '=' expr
*/
let parseRootLet (pExpr:ParseState->ParseState*Expr) (ps0:ParseState) =
  let ps = psResetTmpCtx ps0
  let pLet = parseLetVarDef pExpr
  let psN = psNext ps
  match psCurrentTT psN with
  | LPAREN ->
    parseRootLetFuncDef pLet ps
    |> MapR RSRootFuncDef
  | _ ->
    let psNN = psNext psN
    match psCurrentTT psNN with
    | EQ ->
      let vname = psIdentName psN
      let (psL1, rhs) = psConsume EQ psNN |> pExpr
      let vtype = ExprToType rhs
      let lv = {Var.Name=vname; Ftype=vtype}
      let lvd = {Lvar=lv; Rhs=rhs}
      scDefVar psL1.scope vname lv
      let rootVd = {Vdef=lvd} |> RSRootVarDef
      (psL1, rootVd)
    | _ ->
      parseRootLetFuncDef pLet ps
      |> MapR RSRootFuncDef
     
/*
  parse RecordDef related.
*/

// FIELD_DEF = ID ':' TYPE
let parseFieldDef (ps:ParseState) =
  let fname = psIdentName ps
  let (ps2, tp) = psNextNOL ps |> psConsume COLON |> parseType
  let ntp = {NameTypePair.Name=fname; Ftype=tp}
  (ps2, ntp)


let parseFieldDefs (ps:ParseState) : ParseState*[]NameTypePair =
  let (ps2, ntp) = psSkipEOL ps |> parseFieldDef
  if (psCurrentTT ps2) = RBRACE then
    (ps2, [ntp])
  else
    let ps3 = psConsume SEMICOLON ps2 |> psSkipEOL
    if psCurIs RBRACE ps3 then
      (ps3, [ntp])
    else
      parseFieldDefs ps3
      |> MapR (slice.PushHead ntp)


let regTypeVar (ps:ParseState) (tname:string) =
  FTypeVar {TypeVar.Name=tname}
  |> scRegisterType ps.scope tname

let psRegTypeVars (ps:ParseState) (tnames:[]string) =
  slice.Iter (regTypeVar ps) tnames

/*
  RECORD_DEF = '{' FIELD_DEFS '}'
  FIELD_DEFS = FIELD_DEF  (';' FIELD_DEF)*
*/
let parseRecordDef (tname:string) (pnames:[]string) (ps0:ParseState) =
  let ps = psPushScope ps0
  psRegTypeVars ps pnames
  let (ps2, ntps) = psConsume LBRACE ps |> parseFieldDefs |> MapL (psConsume RBRACE) |> MapL psPopScope
  let rd = {RecordDef.Name=tname; Tparams=pnames; Fields=ntps}
  // register record typedef.
  psRegRecDefToTDCtx rd ps2
  (ps2, rd)

/*
  parse UnionDef related.
*/

// CASE_DEF = '|' IDENIFIER OF TYPE
let parseOneCaseDef (ps:ParseState) =
  let (ps2, cname) = psConsume BAR ps |> psIdentNameNx
  match psCurrentTT ps2 with
  | OF ->
    let (ps3, tp) = psConsume OF ps2 |> parseType
    let cs = {NameTypePair.Name=cname; Ftype=tp}
    (ps3, cs)
  | _ ->
    // no "of", unit case.
    let ps3 = psConsume EOL ps2
    let cs = {NameTypePair.Name=cname; Ftype=FUnit}
    (ps3, cs)

let parseCaseDefs (ps:ParseState) : ParseState*[]NameTypePair =
  let (ps2, cs) = parseOneCaseDef ps
  let ps3 = psSkipEOL ps2
  if (psCurrentTT ps3) = BAR then
    parseCaseDefs ps3 |> MapR (slice.PushHead cs)
  else
    (ps2, [cs])

/*
  UNION_DEF = CASE_DEF (EOL CASE_DEF)* EOL
  CASE_DEF = '|' IDENIFIER OF TYPE
*/
let parseUnionDef tname pnames (ps0:ParseState) =
  let ps = psPushScope ps0
  psRegTypeVars ps pnames
  let (ps2, css) = parseCaseDefs ps |> MapL psPopScope
  let ud = NewUnionDef tname pnames css
  psRegUdToTDCtx ud ps2
  (ps2, ud)

let emptyDefStmt () =
  frt.Empty<RecordDef> ()
  |> DRecordDef

/*
  ID_LIST = IDENTIFIER (',' IDENTIFIER)*
*/
let parseIdList (ps:ParseState) : ParseState*[]string =
  let endPred = fun tps-> (psCurrentTT tps) <> COMMA
  let next = psConsume COMMA
  ParseList2 psIdentNameNx endPred next ps

/*
  if '<' ID_LIST '>', return ID_LIST as []string
  else return empty []string.
*/
let mightParseIdList (ps:ParseState) =
  if psCurIs LT ps then
    psConsume LT ps
    |> parseIdList
    |> MapL (psConsume GT)
  else
    GoEval<[]string> "[]string{}"
    |>NPair ps

/*
  TYPE_DEF_BODY = ID ('<' IDENTIFIER_LIST '>')? '=' (RECORD_DEF | UNION_DEF)
  RECORD_DEF = '{' FIELD_DEFS '}'
  UNION_DEF = '|'...
*/
let parseTypeDefBody (ps:ParseState) = 
  let (ps2, tname) = psIdentNameNxL ps
  let (ps3, pnames) = mightParseIdList ps2 |> MapL (psConsume EQ) |> MapL psSkipEOL
  match psCurrentTT ps3 with
  | LBRACE ->
    parseRecordDef tname pnames ps3 |> MapR DRecordDef
  | BAR ->
    parseUnionDef tname pnames ps3  |> MapR DUnionDef
  | _ ->
    psPanic ps3 "NYI"
    (ps3, (emptyDefStmt ()))

/*
  TYPE_DEF_BODY_LIST = TYPE_DEF_BODY ('and' TYPE_DEF_BODY)*
*/
let parseTypeDefBodyList (ps:ParseState) : ParseState*[]DefStmt =
  let (ps2, df) = parseTypeDefBody ps |> MapL psSkipEOL
  if psCurIs AND ps2 then
    psConsume AND ps2
    |> parseTypeDefBodyList
    |> MapR (slice.PushHead df)
  else
    (ps2, [df])

//  
// TYPE_DEF = 'type' TYPE_DEF_BODY_LIST
let parseTypeDef (ps:ParseState) =
  let (ps2, defList) = psEnterTypeDef ps |> psPushScope |> psConsume TYPE |> parseTypeDefBodyList |> MapL psPopScope |> MapL psLeaveTypeDef
  let nmdefs = {Defs=defList} |> resolveFwrdDecl ps2
  psRegMdTypes nmdefs ps2
  nmdefs
  |> RSMultipleDefs
  |> NPair ps2

/*
  PackageInfo related:
*/

/*
  EXT_TYPE_DEF = 'type' IDENTIFIER ('<' IDENTIFIER_LIST '>')?
*/
let parseExtTypeDef (pi:PackageInfo) (ps:ParseState) =
  let (ps2, tname) = psConsume TYPE ps |> psIdentNameNx
  let (ps3, pnames) = mightParseIdList ps2
  let tfd = piRegEType pi tname pnames
  scRegTFData ps3.scope tname tfd
  ps3


/*
  EXT_FUNC_DEF = 'let' IDENTIFIER (TYPE_PARAM)? ':' FUNC_TYPE
*/
let parseExtFuncDef (pi:PackageInfo) (ps:ParseState) =
  let (ps2, fname) = psConsume LET ps |> psIdentNameNx
  let (ps3, tnames) = mightParseIdList ps2
  psRegTypeVars ps3 tnames
  let (ps4, fts) = psConsume COLON ps3
                   |> parseTypeArrows parseType
  let ff = {Tparams=tnames; Targets=fts}
  piRegFF pi fname ff ps4
  ps4

let parseExtDef (pi:PackageInfo) (ps:ParseState) =
  match (psCurrentTT ps) with
  | LET -> parseExtFuncDef pi ps
  | TYPE -> parseExtTypeDef pi ps
  | _ ->
    psPanic ps "Unknown pkginfo def"
    ps

let parseExtDefs (pi:PackageInfo) (ps:ParseState) : ParseState =
   let ps2 = parseExtDef pi ps |> psSkipEOL
   if isEndOfBlock ps2 then
     ps2
   else
     parseExtDefs pi ps2

/*
  PACKAGE_INFO = 'package_info' IDENTIFIER '=' EOL (OFFSIDE EXT_DEF EOL)*
  EXT_DEF = (EXT_TYPE_DEF|EXT_FUNC_DEF)
*/
let parsePackageInfo (ps:ParseState) =
  let ps2 = psConsume PACKAGE_INFO ps
  let (ps3, pkgName) = if (psCurrentTT ps2) = UNDER_SCORE then
                         (ps2, "_")
                         |> MapL psNext
                       else
                         psIdentNameNx ps2
  let ps4 = psConsume EQ ps3
            |> psSkipEOL
            |> psPushOffside
            |> psPushScope
  let pi = NewPackageInfo pkgName
  let ps5 = parseExtDefs pi ps4
            |> psPopScope
            |> psPopOffside
  piRegAll pi ps5.scope
  (ps5, (RSPackageInfo pi))

/*
  parse Stmt related.
*/

package_info _ =
  let SCLen: Scope->int

let parseRootOneStmt (pExpr: ParseState->ParseState*Expr) (ps:ParseState) =
  psForErrMsg ps
  if (SCLen ps.scope) > 1 then
    psPanic ps "Scope is not property poped."
  match psCurrentTT ps with
  | PACKAGE -> parsePackage ps
  | IMPORT -> parseImport ps
  | LET -> parseRootLet pExpr ps
  | TYPE -> parseTypeDef ps
  | PACKAGE_INFO -> parsePackageInfo ps
  | _ ->
    psPanic ps "Unknown stmt"
    parsePackage ps // never reached this line.

let parseRootOneStmtSk (pExpr: ParseState->ParseState*Expr) (ps:ParseState) =
  parseRootOneStmt pExpr ps
  |> MapL psSkipEOL

let psIsRootStmtsEnd (ps:ParseState) =
  (psCurrentTT ps) = EOF

// this recursive is too deep for golang.
let parseRootStmts (pExpr: ParseState->ParseState*Expr) (ps:ParseState) : ParseState*[]RootStmt =
  psSkipEOL ps
  |> ParseList (parseRootOneStmtSk pExpr) psIsRootStmtsEnd

