package main

import frt
import buf
import slice
import strings

/*
  Type variable, used for type inference and type parameter.
*/
type TypeVar = {Name: string}

/*
  To break mutual recursive type def cycle,
  we treat UnionType as ptr type and update by side effect and propagate change to all referenced data.
*/
package_info _ =
  type UTDataPtr
  type NTPsPtr


type FType =
| FInt
| FString
| FBool
| FUnit
| FAny
| FFunc of FuncType
| FRecord of RecordType
| FUnion of UnionType
| FSlice of SliceType
| FTuple of TupleType
| FFieldAccess of FieldAccessType
| FTypeVar of TypeVar
| FParamd of ParamdType
and SliceType = {ElemType: FType}
and FuncType = {Targets: []FType}
and ParamdType = {Name: string; Targs: []FType}
and FieldAccessType = {RecType: FType; FieldName: string}
and TupleType = {ElemTypes: []FType}
and NameTypePair = {Name: string; Ftype: FType}
and RecordType = {Name: string; Fields: []NameTypePair}
and UnionType = {Name: string; CasesPtr: NTPsPtr}

package_info _ =
  let NewNTPsPtr: []NameTypePair -> NTPsPtr
  let NTPsPtrGet: NTPsPtr->[]NameTypePair
  let NTPsUpdate: NTPsPtr->[]NameTypePair->()
  let PanicNow: string->()

let newUTWithPtr name cptr =
  {UnionType.Name=name; CasesPtr=cptr}

let newUT name cases =
  let ptr = NewNTPsPtr cases
  newUTWithPtr name ptr


let utName (ut:UnionType) =
  ut.Name

let utCases (ut:UnionType) =
  NTPsPtrGet ut.CasesPtr

let utUpdateCases (ut:UnionType) cases =
  NTPsUpdate ut.CasesPtr cases

let fargs (ft:FuncType) =
  let l = slice.Length ft.Targets
  ft.Targets |> slice.Take (l-1)

let freturn (ft:FuncType) =
  slice.Last ft.Targets

let funcTypeToGo (ft:FuncType) (toGo:FType->string) =
  let last = slice.Last ft.Targets
  let args = fargs ft
  let bw = buf.New ()
  buf.Write bw "func ("
  args |> slice.Map toGo |> strings.Concat "," |> buf.Write bw
  buf.Write bw ")"
  let ret = match last with
            | FUnit -> ""
            | _ -> " " + (toGo last)
  buf.Write bw ret
  buf.String bw

let recordTypeToGo (frec: RecordType) =
  frec.Name

let frStructName (frec: RecordType) =
  frec.Name

let lookupPairByName (targetName:string) (pairs: []NameTypePair) =
  let res = pairs |> slice.Filter (fun x-> x.Name = targetName)
  if slice.IsEmpty res then
    frt.Sprintf1 "Can't find record field of: %s" targetName
    |> PanicNow
  slice.Head res

let frGetField (frec: RecordType) (fieldName: string) =
  lookupPairByName fieldName frec.Fields

let newNTPair name ft =
  {NameTypePair.Name=name; Ftype=ft}

let frMatch (frec: RecordType) (fieldNames: []string)=
  if (slice.Length fieldNames) <> (slice.Length frec.Fields) then
    false
  else
    // let sortedInput = slice.Sort fieldNames
    let sortedInput = fieldNames |> slice.Sort
    let sortedFName = slice.Map _.Name frec.Fields
                      |> slice.Sort
    sortedInput = sortedFName

let newFFunc (ftypes:[]FType) =
   {FuncType.Targets=ftypes} |> FFunc

let fUnionToGo (fu: UnionType) =
  utName fu

let lookupCase (fu: UnionType) (caseName: string) =
  utCases fu |> lookupPairByName caseName

// IntOrString_I
let unionCSName (unionName: string) (caseName: string) =
  unionName + "_" + caseName

let fSliceToGo (fs: SliceType) (toGo:FType->string) =
  "[]" + (toGo fs.ElemType)

// only support two tuple for a while
let fTupleToGo (toGo:FType->string) (ft:TupleType) =
  let args = slice.Map toGo ft.ElemTypes |> strings.Concat ", "
  frt.Sprintf1 "frt.Tuple2[%s]" args

let faResolve (fat:FieldAccessType) =
  match fat.RecType with
  | FRecord rt ->
    let field = frGetField rt fat.FieldName
    field.Ftype
  | _ -> fat |> FFieldAccess

let encloseWith (beg:string) (end:string) (center:string) =
  beg+center+end

let fpToGo (tToGo:FType->string) (pt:ParamdType) =
  // Dict<string, int> -> Dict[string, int]
  if slice.IsEmpty pt.Targs then
    pt.Name
  else
    slice.Map tToGo pt.Targs
    |> strings.Concat ", "
    |> encloseWith (pt.Name + "[") "]"


let FTypeToGo (ft:FType) : string =
  match ft with
  | FInt -> "int"
  | FBool -> "bool"
  | FAny -> "any"
  | FString -> "string"    
  | FUnit -> "" // When use as return type in Go, "" is suitable.
  | FFunc ft -> funcTypeToGo ft FTypeToGo
  | FRecord fr -> recordTypeToGo fr
  | FUnion fu -> fUnionToGo fu
  | FParamd pt -> fpToGo FTypeToGo pt
  | FSlice fs -> fSliceToGo fs FTypeToGo
  | FTuple ft -> fTupleToGo FTypeToGo ft
  | FFieldAccess _ -> "FieldAccess_Unresoled" // must be removed during type resolution.
  | FTypeVar fp -> fp.Name
