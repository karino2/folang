package main

import frt
import sys
import slice
import strings
import "path/filepath"

let printUsage () =
  frt.Println "Usage: fc file1.fo file2.fo file3.fo ..."

package_info _ =
  let ParseAll: ParseState->ParseState*[]RootStmt

package_info filepath =
  let Dir: string->string
  // this is wrong, but OK for 2 arg.
  let Join: string->string->string
  let Base: string->string


let transpileOne (parser: ParseState) (file:string) =
  let (src, ok) = sys.ReadFile file
  if ok then
    let (ps2, stmts) = psSetNewSrc src parser 
                       |>ParseAll
    let res = RootStmtsToGo stmts
		// for .foi file, just skip writing.
		// only write result for .fo file.
    if strings.HasSuffix ".fo" file then
      let dir = filepath.Dir file
      let base = filepath.Base file |> strings.TrimSuffix ".fo"
      let newFname = "gen_" + base + ".go"
      let dest = filepath.Join dir newFname
      sys.WriteFile dest res
      ()
    (ps2, true)
  else
    frt.Panicf1 "Can't open file: %s" file
    (parser, false)

let transpileRecur (parser: ParseState) (files:[]string) : ParseState*bool =
  if slice.IsEmpty files then
    (parser, true)
  else
    let head = slice.Head files
    let (ps2, ok) = transpileOne parser head
    if ok then
      let rest = slice.Tail files
      transpileRecur ps2 rest
    else
      (parser, false)


let transpileFiles (files:[]string) =
  let parser = initParse ""
  transpileRecur parser files
  ()


let main () =
  let args = sys.Args () |> slice.Tail
  if slice.IsEmpty args then
    printUsage ()
  else
    transpileFiles args