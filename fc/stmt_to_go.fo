package main
import frt
import buf
import slice
import strings

let imToGo (pn:string) =
  $"import \"{pn}\""

let pmToGo (pn:string) =
  $"package {pn}"

/*

  LetFuncDef to Go implementation.

*/


/*
  Emit parameters of func defs like following:
  a int, b string, c []int
*/
let lfdParamsToGo (lfd:LetFuncDef) =
   lfd.Params |> slice.Map paramsToGo |> strings.Concat ", "

let lfdToGo (bToGoRet: Block->string) (lfd:LetFuncDef) =
  let b = buf.New ()
  buf.Write b "func "
  buf.Write b lfd.Fvar.Name
  buf.Write b "("
  lfdParamsToGo lfd |> buf.Write b
  buf.Write b ") "
  blockToType ExprToType lfd.Body |> FTypeToGo |> buf.Write b
  buf.Write b "{\n"
  bToGoRet lfd.Body |> buf.Write b
  buf.Write b "\n}"
  buf.String b

// for poor tinyfo inference.
let pany (s:string) =
  frt.Sprintf1 "%s any" s

let writeTParamsIfAny b tparams =
  if not (slice.IsEmpty tparams) then
    buf.Write b "["
    tparams
    |> slice.Map pany
    |> strings.Concat ", "
    |> buf.Write b
    buf.Write b "]"

let rfdToGo (bToGoRet: Block->string) (rfd:RootFuncDef) =
  let lfd = rfd.Lfd
  let b = buf.New ()
  buf.Write b "func "
  buf.Write b lfd.Fvar.Name
  writeTParamsIfAny b rfd.Tparams
  buf.Write b "("
  lfdParamsToGo lfd |> buf.Write b
  buf.Write b ") "
  blockToType ExprToType lfd.Body |> FTypeToGo |> buf.Write b
  buf.Write b "{\n"
  bToGoRet lfd.Body |> buf.Write b
  buf.Write b "\n}"
  buf.String b


let lvdToGo (eToGo: Expr->string) (lvd:LetVarDef) =
  let rhs = eToGo lvd.Rhs
  lvd.Lvar.Name + " := " + rhs

let ldvdToGo (eToGo: Expr->string) (ldvd:LetDestVarDef) =
  let b = buf.New ()
  slice.Map _.Name ldvd.Lvars |> strings.Concat ", " |> buf.Write b
  buf.Write b " := frt.Destr("
  eToGo ldvd.Rhs |> buf.Write b
  buf.Write b ")"
  buf.String b

/*
  RecordDef to Go implementation.
*/

let rdffieldToGo (field: NameTypePair) =
  "  " + field.Name + " " + (FTypeToGo field.Ftype)

let rdfToGo (rdf:RecordDef) =
  let b = buf.New ()
  buf.Write b $"type {rdf.Name}"
  writeTParamsIfAny b rdf.Tparams
  buf.Write b " struct {\n"
  rdf.Fields |> slice.Map rdffieldToGo |> strings.Concat "\n" |> buf.Write b
  buf.Write b "\n}" 
  buf.String b

/*
   UnionDef to Go implementation.
*/

/*
Union implementation.
For following code:
type IntOrString =

	| I of int
	| B of bool

The result becomes following three types.

- IntOrString interface
- IntOrString_I struct (with Value int)
- IntOrString_B struct (with Value bool)

We call IntOrString_I "case struct of I".
*/

/*
	type IntOrString interface {
	  IntOrString_Union()
	}
*/
let udUnionDef (ud:UnionDef) =
  let b = buf.New ()
  buf.Write b $"type {ud.Name} interface "
  buf.Write b "{\n"
  buf.Write b $"  {ud.Name}_Union()\n"
  buf.Write b "}\n"
  buf.String b

/*
func (IntOrString_I) [method]
*/
let csToConformMethod (uname:string) (method:string) (cas: NameTypePair) =
  let csname = unionCSName uname cas.Name
  $"func ({csname}) {method}"

/*
func (IntOrString_I) IntOrString_Union(){}
func (IntOrString_B) IntOrString_Union(){}
*/
let udCSConformMethods (ud:UnionDef) =
  let method =  $"{ud.Name}_Union()" + "{}\n"
  udCases ud |> slice.Map (csToConformMethod ud.Name method) |> strings.Concat ""

/*
	type IntOrString_I struct {
	   Value int
	}
*/
let udCSDef (ud:UnionDef) (cas: NameTypePair) =
  let b = buf.New ()
  buf.Write b "type "
  unionCSName ud.Name cas.Name |> buf.Write b
  buf.Write b " struct {\n"
  if cas.Ftype <> FUnit then
    buf.Write b "  Value "
    FTypeToGo cas.Ftype |> buf.Write b
    buf.Write b "\n"
  buf.Write b "}\n"
  buf.String b

// New_IntOrString_I
let csConstructorName  (unionName: string) (cas: NameTypePair) =
   "New_" + (unionCSName unionName cas.Name)

/*
CS Constructor, function case.

func New_IntOrString_I(v int) IntOrString { return IntOrString_I{v} }
*/
let csConstructFunc (uname:string) (cas: NameTypePair) =
  let b = buf.New ()
  buf.Write b "func "
  csConstructorName uname cas |> buf.Write b
  buf.Write b "(v "
  FTypeToGo cas.Ftype |> buf.Write b
  buf.Write b ") "
  buf.Write b uname
  buf.Write b " { return "
  buf.Write b (unionCSName uname cas.Name)
  buf.Write b "{v} }\n"
  buf.String b


/*
CS Constructor, variable case.

No arg case constructor case.
In this case, folang regard no arg func as variable.
So the result must be following:

var New_IntOrString_I IntOrString = &IntOrString_I{}
*/
let csConstructVar (uname:string) (cas: NameTypePair) =
  let b = buf.New ()
  buf.Write b "var "
  csConstructorName uname cas |> buf.Write b
  buf.Write b $" {uname} = "
  buf.Write b (unionCSName uname cas.Name)
  buf.Write b "{}\n"
  buf.String b

let csConstruct (uname:string) (cas: NameTypePair) =
  if cas.Ftype = FUnit then
    csConstructVar uname cas
  else
    csConstructFunc uname cas

let caseToGo (ud:UnionDef) (cas: NameTypePair) =
  let sdf = udCSDef ud cas
  let csdf = csConstruct ud.Name cas
  sdf + "\n" + csdf + "\n"

let udfToGo (ud:UnionDef) =
  let b = buf.New ()
  udUnionDef ud |> buf.Write b
  buf.Write b "\n"
  udCSConformMethods ud |> buf.Write b
  buf.Write b "\n"
  udCases ud |> slice.Map (caseToGo ud) |> strings.Concat "" |> buf.Write b
  buf.String b

/*
  DefStmt to Go, MultpleDefs to Go
*/

let dsToGo (ds:DefStmt) =
   match ds with
   | DRecordDef rd -> rdfToGo rd
   | DUnionDef ud -> udfToGo ud

let mdToGo (md:MultipleDefs) =
  md.Defs |>  slice.Map dsToGo |> strings.Concat "\n"

let StmtToGo (stmt:Stmt) : string=
  let eToGo = ExprToGo StmtToGo
  match stmt with
  | SLetVarDef llvd ->
    match llvd with
    | LLOneVarDef lvd -> lvdToGo eToGo lvd
    | LLDestVarDef ldvd -> ldvdToGo eToGo ldvd
  | SExprStmt expr -> eToGo expr

let RootStmtToGo (rstmt:RootStmt) : string=
  let eToGo = ExprToGo StmtToGo
  let reToGoRet = reToGoReturn StmtToGo eToGo
  let bToGoRet = blockToGoReturn StmtToGo eToGo reToGoRet
  match rstmt with
  | RSImport im -> imToGo im
  | RSPackage pn -> pmToGo pn
  | RSPackageInfo -> ""
  | RSRootFuncDef rfd -> rfdToGo bToGoRet rfd
  | RSDefStmt ds -> dsToGo ds
  | RSMultipleDefs md -> mdToGo md



let RootStmtsToGo (rstmts:[]RootStmt) =
  slice.Map RootStmtToGo rstmts |> strings.Concat "\n\n" |> strings.AppendTail "\n"
