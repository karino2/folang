package main

import frt
import slice

let faToType (eToT:Expr->FType) (fa:FieldAccess) =
  let tart = eToT fa.TargetExpr
  match tart with
  | FRecord rt ->
    let field = frGetField rt fa.FieldName
    field.Ftype
  | _ ->
    {RecType=tart; FieldName=fa.FieldName}
    |> FFieldAccess

let lblockReturnType (toT: Expr->FType) (lb:LazyBlock) =
  toT lb.Block.FinalExpr

let lblockToType (toT: Expr->FType)  (lb:LazyBlock)=
  let rtype = lblockReturnType toT lb
  FFunc {Targets=[FUnit; rtype]}

let blockReturnType (toT: Expr->FType) (block:Block) =
  toT block.FinalExpr

let blockToType (toT: Expr->FType)  (b:Block)=
  blockReturnType toT b

let blockToExpr (block:Block) =
  EReturnableExpr (RBlock block)

let exprToBlock (bexpr:Expr) =
  match bexpr with
  | EReturnableExpr re ->
    match re with
    | RBlock b -> b
    | _ ->
      PanicNow "Not block, some ReturnableExpr."
      frt.Empty<Block> ()
  | _ ->
    PanicNow "Not block."
    frt.Empty<Block> ()

let umrFirstBody (umr:UnionMatchRules) =
  match umr with
  | UCaseOnly us -> slice.Head us |> _.Body
  | UCaseWD uds -> slice.Head uds.Unions |> _.Body

let smrFirstBody (smr:StringMatchRules) =
  match smr with
  | SCaseWV svs -> slice.Head svs.Literals |> _.Body
  | SCaseWD sds -> slice.Head sds.Literals |> _.Body

let meToType (toT: Expr->FType) (me:MatchExpr) =
  let bToT = fun b -> blockToExpr b |> toT
  let firstBody = 
    match me.Rules with
    | RUnions ru -> umrFirstBody ru
    | RStrings rs -> smrFirstBody rs
  bToT firstBody

let returnableToType (toT: Expr->FType) (rexpr:ReturnableExpr)  : FType =
  match rexpr with
  | RBlock b -> blockToType toT b
  | RMatchExpr me -> meToType toT me

let fcToFuncType (fc:FunCall) =
  // double field access like fc.TargetFunc.Ftype is NYI.
  let tfv = fc.TargetFunc
  let ft = varRefVarType tfv
  match ft with
  | FFunc ft -> ft
  | _ -> GoEval<FuncType> "FuncType{}" // never happens.


let fcToType (fc:FunCall) =
  let firstTp = varRefVarType fc.TargetFunc
  match firstTp with
  | FTypeVar _ -> firstTp  
  | _ ->
    let ft = fcToFuncType fc
    let tlen = fargs ft |> slice.Length
    let alen = slice.Length fc.Args
    if alen = tlen then
      freturn ft
    else
      // prtial apply.
      GoEval "if alen > tlen { panic(\"too many arugments\")}"
      let newts = slice.Skip alen ft.Targets
      FFunc {Targets=newts}

let lambdaToType bToT (le:LambdaExpr) =  
  slice.Map _.Ftype le.Params  
  |> slice.PushLast (bToT le.Body)
  |> newFFunc

let ExprToType (expr:Expr) : FType =
  match expr with
  | EGoEvalExpr ge -> ge.TypeArg
  | EStringLiteral _ -> FString
  | ESInterP _ -> FString
  | EIntImm _ -> FInt
  | EUnit -> FUnit
  | EBoolLiteral _ -> FBool
  | EFieldAccess fa -> faToType ExprToType fa
  | ELambda le -> lambdaToType (blockToType ExprToType) le
  | EVarRef vr -> 
      let v = varRefVar vr
      v.Ftype
  | ESlice s -> 
    // slice must be all the same type, so use first elem type.
    let etp = slice.Head s |> ExprToType
    let st = {SliceType.ElemType=etp}
    FSlice st
  | ETupleExpr es ->
    let ts = slice.Map ExprToType es
    {TupleType.ElemTypes=ts}
    |> FTuple
  | ERecordGen rg -> FRecord rg.RecordType
  | ELazyBlock lb -> lblockToType ExprToType lb
  | EReturnableExpr re -> returnableToType ExprToType re
  | EFunCall fc -> fcToType fc
  | EBinOpCall bc -> bc.Rtype
