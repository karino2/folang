package main

import frt
import slice
import dict

/*
  UniRel collection.
*/

// src VarType and dest FType has unique constraints.
// If both are VarType, src is alphabetically later order (to avoid cyclic reference to later stage).
type UniRel = {SrcV:string; Dest: FType}

let emptyRels () =
  frt.Empty<[]UniRel> ()

// generics it NYI...
let tupApply (f:FType->FType->FType*[]UniRel) (tup:FType*FType) =
  let (lhs, rhs) = tup
  f lhs rhs

let withRels (rels:[]UniRel) (tp:FType) =
  (tp, rels)

let withTp (tp:FType) (rels:[]UniRel) =
  (tp, rels)


let compositeTpList (cOne: FType->FType->FType*[]UniRel) (lhs: []FType) (rhs: []FType) =
  let tups = slice.Zip lhs rhs
              |> slice.Map (tupApply cOne)
  let tps = tups |> slice.Map frt.Fst 
  let rels = tups |> slice.Map frt.Snd |> slice.Concat
  (tps, rels)


/*
  compare two type and adopt concrete one.
  
  tp1: int->T1->[]string
  tp2: int->int->[]T2

  result type is: int->int->[]string
  unirel is: [{T1->int}; {T2->string}]

  If you just need unirel, just discard result type. 
*/
let compositeTp (lhs:FType) (rhs:FType) : FType*[]UniRel =
  match lhs with
  | FTypeVar tv ->
    match rhs with
    | FTypeVar tv2 ->
      // same typevar
      if tv.Name = tv2.Name then        
        emptyRels ()
        |> withTp lhs
      elif tv.Name > tv2.Name then
        // keep alphabetically later one to src.
        [{SrcV=tv.Name; Dest=rhs}]
        |> withTp rhs
      else
        [{SrcV=tv2.Name;Dest=lhs}]
        |> withTp lhs
    | _ ->
      [{SrcV=tv.Name; Dest=rhs}]
      |> withTp rhs
  | _ ->
    match rhs with
    | FTypeVar tv2 ->
      [{SrcV=tv2.Name; Dest=lhs}]
      |> withTp lhs
    // Both are not FTypeVar, drill down.
    // Both type must be equal for this layer.
    | FSlice ts2 ->
      match lhs with
      | FSlice ts1 ->
        let (rtp, rels) = compositeTp ts1.ElemType ts2.ElemType
        {SliceType.ElemType=rtp}
        |> FSlice
        |> withRels rels
      | FFieldAccess _ ->
        // []T1 = FA(T2, "xx") case.
        // It is difficult to handle.
        // So just give up for this case.
        // Hope other relation will resolve all type.
        emptyRels ()
        |> withTp rhs // slice would be better.
      | _ ->
        frt.Panic "right is slice, left is neither slice nor field access."
        emptyRels ()
        |> withTp lhs
    | FFieldAccess fa2 ->
      let fa22 = faResolve fa2
      match fa22 with
      | FFieldAccess _ ->
        match lhs with
        | FFieldAccess fa1 ->
          let fa12 = faResolve fa1
          match fa12 with
          | FFieldAccess _ ->
            let (rtp, rels) = compositeTp fa1.RecType fa2.RecType
            {RecType=rtp; FieldName=fa1.FieldName}
            |>faResolve
            |> withRels rels
          | _ ->
            // resolved, try resolved type again.
            compositeTp fa12 rhs
        | FSlice _ ->
          // []T1 = FA(T2, "xx") case.
          // same as above 
          emptyRels ()
          |> withTp lhs
        | _ ->
          // FA(T, "xx") = XXX case.
          // just ignore .
          emptyRels ()
          |> withTp lhs
      | _ -> 
        // resolved, try resolved type again.
        compositeTp lhs fa22
    | FFunc tf2 ->
      let tf1 = GoEval<FuncType> "lhs.(FType_FFunc).Value"
      let (tps, rels) = compositeTpList compositeTp tf1.Targets tf2.Targets
      newFFunc tps
      |> withRels rels
    | FParamd pt2 ->
      let pt1 = GoEval<ParamdType> "lhs.(FType_FParamd).Value"
      let (tps, rels) = compositeTpList compositeTp pt1.Targs pt2.Targs
      {Name=pt1.Name; Targs=tps}
      |> FParamd
      |> withRels rels
    | FTuple tt2 ->
      let tt1 = GoEval<TupleType> "lhs.(FType_FTuple).Value"
      // [](type*[]UniRel)
      let (tps, rels) = compositeTpList compositeTp tt1.ElemTypes tt2.ElemTypes
      {TupleType.ElemTypes=tps}
      |> FTuple
      |> withRels rels
    | _ ->
      // both type is concrete.
      emptyRels ()
      |> withTp lhs


let unifyType (lhs:FType) (rhs:FType) : []UniRel =
  let (_, rels) = compositeTp lhs rhs
  rels

let unifyTupArg (tup:FType*FType) =
  let (lhs, rhs) = tup
  unifyType lhs rhs

// Var's type-Expr unify, but ignore "_"
let unifyVETup (veTup: Var*FType) =
  let (v, ft) = veTup
  if v.Name = "_" then
    emptyRels ()
  else
    unifyType v.Ftype ft

let varsToTupleType (vars: []Var) =
  let ets = slice.Map _.Ftype vars
  {ElemTypes=ets}
  |> FTuple

let collectStmtRel (ec:Expr->[]UniRel) (stmt:Stmt) : []UniRel =
  match stmt with
  | SExprStmt se -> ec se
  | SLetVarDef slvd ->
    match slvd with
    | LLOneVarDef lvd ->
      let inside = ec lvd.Rhs
      unifyType lvd.Lvar.Ftype (ExprToType lvd.Rhs)
      |> slice.Append inside
    | LLDestVarDef ldvd ->
        let inside = ec ldvd.Rhs
        let rhtype = ExprToType ldvd.Rhs
        match rhtype with
        | FTuple ft ->
          slice.Zip ldvd.Lvars ft.ElemTypes
          |> slice.Map unifyVETup
          |> slice.Concat
          |> slice.Append inside
        | FTypeVar _ ->
          let lft = varsToTupleType ldvd.Lvars
          unifyType rhtype lft
          |> slice.Append inside
        | _ ->
          frt.Panic "Destructuring of right is not tuple, NYI."
          inside

/*
  collectXXX is subfunction for collectExprRel.

  collectXXX is called after inside of collection is done.
  So just check current layer for each node.
*/
let collectFunCall (fc: FunCall) =
  let tftype = varRefVarType fc.TargetFunc
  match tftype with
  | FFunc fft ->
    let argTps = slice.Map ExprToType fc.Args
    let tpArgTps = (fargs fft) |> slice.Take (slice.Length argTps)
    slice.Zip argTps tpArgTps
    |> slice.Map unifyTupArg
    |> slice.Concat
  | _ ->
    frt.Panic "funcall with non func first arg, possibly TypeVar, NYI."
    emptyRels ()

let collectSlice (es: []Expr) =
  if (slice.Length es) <= 1 then
    emptyRels ()
  else
    let headT = slice.Head es |> ExprToType
    slice.Tail es
    |> slice.Map ExprToType
    |> slice.Map (unifyType headT)
    |> slice.Concat

// This is exception for collectXXX.
// collect inside here.
let collectBlock (colE:Expr->[]UniRel) (colS:Stmt->[]UniRel) (block:Block) =
    slice.Map colS block.Stmts
    |> slice.Concat
    |> slice.Append (colE block.FinalExpr)

let NEPToNT (nep:NEPair) =
  (nep.Name, ExprToType nep.Expr)

let recNTUnify (rec:RecordType) (ntp: string*FType) =
   let (name, ftp) = ntp
   let rpair = frGetField rec name
   unifyType ftp rpair.Ftype


let collectExprRel (expr:Expr) : []UniRel =
  let colE = collectExprRel
  let colB = collectBlock colE (collectStmtRel colE)
  match expr with
  | EFunCall fc ->
    let inside = slice.Map colE fc.Args |> slice.Concat
    collectFunCall fc
    |> slice.Append inside
  | EBinOpCall bop ->
    let insideL = colE bop.Lhs 
    let insideR = colE bop.Rhs
    let lft = ExprToType bop.Lhs
    let rft = ExprToType bop.Rhs
    let teq = unifyType lft rft
    let retEq = match bop.Rtype with
                | FBool -> emptyRels ()
                | _ -> unifyType bop.Rtype lft
    let all = [insideL;insideR;teq; retEq]
    slice.Concat all
  | ETupleExpr tes ->
    slice.Map colE tes |> slice.Concat   
  | ELambda le ->
    colB le.Body
  | ESlice es ->
    let inside = slice.Map colE es |> slice.Concat
    collectSlice es
    |> slice.Append inside
  | ERecordGen rg ->
    let fieldValEs = slice.Map _.Expr rg.FieldsNV
    let inside = fieldValEs
                |> slice.Map colE
                |> slice.Concat
    slice.Map NEPToNT rg.FieldsNV
    |> slice.Map (recNTUnify rg.RecordType)
    |> slice.Concat
    |> slice.Append inside
  | ELazyBlock lb ->
    colB lb.Block
  | EReturnableExpr re ->
    match re with
    | RBlock bl ->
      colB bl
    | RMatchExpr me ->
      slice.Map _.Body me.Rules
      |> slice.Map colB
      |> slice.Concat
      |> slice.Append (colE me.Target)
  | _ -> emptyRels()

let lfdRetType (lfd:LetFuncDef) =
  match lfd.Fvar.Ftype with
  | FFunc ft -> freturn ft
  | _ ->
    frt.Panic "LetFuncDef's fvar is not FFunc type."
    FUnit

let collectLfdRels (lfd:LetFuncDef) =
  let brels = blockToExpr lfd.Body
              |> collectExprRel
  let lastExprType = lfd.Body.FinalExpr |> ExprToType
  unifyType (lfdRetType lfd) lastExprType
  |> slice.Append brels

/*
  Building ResolveInfo from []UniRel
*/

/*
  EquivSet related
*/
let newEquivSet0 () =
  let dic = dict.New<string, bool> ()
  {EquivSet.Dict=dic}

let NewEquivSet (tv:TypeVar) =
  let es = newEquivSet0 ()
  dict.Add es.Dict tv.Name true
  es

let eqsItems (es:EquivSet) =
  dict.Keys es.Dict

let setAddKeys d (k:string) =
  dict.Add d k true

let eqsUnion (es1:EquivSet) (es2:EquivSet) =
  let e3 = newEquivSet0 ()
  dict.Keys es1.Dict
  |> slice.Iter (setAddKeys e3.Dict)
  dict.Keys es2.Dict
  |> slice.Iter (setAddKeys e3.Dict)
  e3


let eiUnion (e1: EquivInfo) (e2:EquivInfo) =
  let nset = eqsUnion e1.eset e2.eset
  let (nres, rels) = compositeTp e1.resType e2.resType
  let nei = {eset=nset; resType=nres}
  (nei, rels)

let eiUpdateResT (e: EquivInfo) (tcan:FType) =
  let (nres, rels) = compositeTp e.resType tcan
  let nei = {eset=e.eset; resType=nres}
  (nei, rels)

// EquivInfo which only contains TypeVar and resType is TypeVar.
let eiInit (tv:TypeVar) =
  let es = NewEquivSet tv
  let rtype = FTypeVar tv
  {eset=es; resType=rtype}


let rsLookupEI (res:Resolver) (tvname:string) =
  let (ei, ok) = dict.TryFind res.eid tvname
  if ok then
    ei
  else
    // if not exist, return only tv's ei.
    eiInit {TypeVar.Name=tvname}

let rsRegisterTo (res:Resolver) (ei:EquivInfo) (key:string) =
  dict.Add res.eid key ei

let rsRegisterNewEI (res:Resolver) (ei:EquivInfo) =
  eqsItems ei.eset
  |> slice.Iter (rsRegisterTo res ei)

let updateResOne (res:Resolver) (rel:UniRel) =
  let ei1 = rsLookupEI res rel.SrcV
  match rel.Dest with
  | FTypeVar tvd ->
    let ei2 = rsLookupEI res tvd.Name
    let (nei, rels) = eiUnion ei1 ei2
    rsRegisterNewEI res nei
    rels
  | _ ->
    let (nei, rels) = eiUpdateResT ei1 rel.Dest
    if slice.IsEmpty rels then
      emptyRels ()
    else
      rsRegisterNewEI res nei
      rels

let updateResolver (res:Resolver) (rels:[]UniRel) : Resolver =
  let nrels = rels |> slice.Map (updateResOne res) |> slice.Concat
  if slice.IsEmpty nrels then
    res
  else
    updateResolver res nrels

let transTypeLfd (transTV:TypeVar->FType) (lfd:LetFuncDef) =
   let transV = transTVVar transTV  
   let nfvar = transV lfd.Fvar
   let nparams = slice.Map transV lfd.Params
   let nbody = transTVBlock transTV lfd.Body
   {Fvar=nfvar; Params=nparams; Body=nbody}


/*
  resolve type using transTVExpr utility.
*/

let resolveOneTypeVar (rsv: Resolver) (tv:TypeVar) : FType =
  let recurse = resolveOneTypeVar rsv
  let ei = rsLookupEI rsv tv.Name
  let rcand = ei.resType
  match rcand with
  | FTypeVar tv2 ->
    if tv2.Name = tv.Name then
      // same type var, no need to drill down.
      rcand
    else
      transTVFType recurse rcand
  | _ -> transTVFType recurse rcand
  

let resolveType (rsv: Resolver) (ftp:FType) : FType =
  transTVFType (resolveOneTypeVar rsv) ftp


let resolveExprType (rsv: Resolver) (expr:Expr) : Expr =
  transTVExpr (resolveOneTypeVar rsv) expr

let resolveLfd (rsv: Resolver) (lfd:LetFuncDef) =
  transTypeLfd (resolveOneTypeVar rsv) lfd

let InferExpr (tvc:TypeVarCtx) (expr:Expr) =
   let rels = collectExprRel expr
   updateResolver tvc.resolver rels
   resolveExprType tvc.resolver expr

let collectTVarLfd (lfd:LetFuncDef) =
  let vres = collectTVarFType lfd.Fvar.Ftype
  let pres = slice.Map _.Ftype lfd.Params |> slice.Collect collectTVarFType
  let bres = collectTVarBlockFacade lfd.Body
  let res = [vres;pres;bres] // poor parse.
  slice.Concat res

let newTName (i:int) (n:string) =
  frt.Sprintf1 "T%d" i

let replaceSDict (ttdict:dict.Dict<string, string>) (tv:TypeVar) =
  let nname = dict.Item ttdict tv.Name
  {TypeVar.Name=nname} |> FTypeVar


let hoistTVar (unresT:[]string) (lfd:LetFuncDef) =
  let newTs = slice.Mapi newTName unresT
  let ttdict = slice.Zip unresT newTs |> dict.ToDict
  let transTV = replaceSDict ttdict
  let nlfd = transTypeLfd transTV lfd
  (newTs, nlfd)


/*
  Infer TypeVar's and promote as TypeParameters if necessary, then return RootFuncDef.
*/
let InferLfd (tvc:TypeVarCtx) (lfd:LetFuncDef) =
  let rels = collectLfdRels lfd
  // frt.Printf1 "%v\n" rels
  updateResolver tvc.resolver rels
  let nlfd = resolveLfd tvc.resolver lfd
  let unresTvs = collectTVarLfd nlfd |> slice.Distinct
  // frt.Printf1 "unres: %v\n" unresTvs
  let (newTvs, nlfd2) = hoistTVar unresTvs nlfd
  // frt.Printf1 "newTvs: %v\n" newTvs
  {Tparams=newTvs; Lfd=nlfd2}